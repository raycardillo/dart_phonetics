/*
 * dart_phonetics is a collection of phonetics algorithms implemented in Dart.
 * Copyright (c) 2019 Raymond Cardillo (dba Cardillo's Creations)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

import 'package:dart_phonetics/src/double_metaphone.dart';
import 'package:test/test.dart';

import 'test_utils.dart';

void main() {
  group('Constructor Tests', () {
    test('test basic constructors', () {
      expectEncoding(DoubleMetaphone(), 'ABBA', 'AP');
      expectEncoding(DoubleMetaphone.defaultEncoder, 'ACK', 'AK');
    });
  });

  group('Encoding Tests', () {
    test('basic encoding tests', () {
      final encoder = DoubleMetaphone.defaultEncoder;
      expectEncoding(encoder, 'testing', 'TSTN', ['TSTN']);
      expectEncoding(encoder, 'The', '0', ['T']);
      expectEncoding(encoder, 'quick', 'KK', ['KK']);
      expectEncoding(encoder, 'brown', 'PRN', ['PRN']);
      expectEncoding(encoder, 'fox', 'FKS', ['FKS']);
      expectEncoding(encoder, 'jumped', 'JMPT', ['AMPT']);
      expectEncoding(encoder, 'over', 'AFR', ['AFR']);
      expectEncoding(encoder, 'the', '0', ['T']);
      expectEncoding(encoder, 'lazy', 'LS', ['LS']);
      expectEncoding(encoder, 'dogs', 'TKS', ['TKS']);
    });

    test('double barrel handling', () {
      final encoder = DoubleMetaphone.defaultEncoder;
      expectEncoding(encoder, r'Goddard-Gifford', 'KTRT', ['KTRT']);
      expectEncoding(encoder, r'Goddard\Gifford', 'KTRT', ['KTRT']);
      expectEncoding(encoder, r'Goddard/Gifford', 'KTRT', ['KTRT']);
    });

    // Examples from Table 2 of paper:
    // Performance Evaluation of Phonetic Matching Algorithms on [...]
    // https://scholar.google.com/scholar?cluster=634245576371390488&hl=en&as_sdt=0,21&as_vis=1
    test('test performance paper examples', () {
      final encoder = DoubleMetaphone.defaultEncoder;
      final encoderNoMax = DoubleMetaphone.withMaxLength(0);

      //expectEncoding(encoder, 'Phonetic', 'FNTK');
      expectEncoding(encoderNoMax, 'Phonetic', 'FNTK');

      expectEncoding(encoder, 'Matching', 'MXNK');
      expectEncoding(encoderNoMax, 'Matching', 'MXNK');
    });

    test('test batch A', () {
      final encoder = DoubleMetaphone.defaultEncoder;
      expectEncoding(encoder, 'ALLERTON', 'ALRT', ['ALRT']);
      expectEncoding(encoder, 'Acton', 'AKTN', ['AKTN']);
      expectEncoding(encoder, 'Adams', 'ATMS', ['ATMS']);
      expectEncoding(encoder, 'Aggar', 'AKR', ['AKR']);
      expectEncoding(encoder, 'Ahl', 'AL', ['AL']);
      expectEncoding(encoder, 'Aiken', 'AKN', ['AKN']);
      expectEncoding(encoder, 'Alan', 'ALN', ['ALN']);
      expectEncoding(encoder, 'Alcock', 'ALKK', ['ALKK']);
      expectEncoding(encoder, 'Alden', 'ALTN', ['ALTN']);
      expectEncoding(encoder, 'Aldham', 'ALTM', ['ALTM']);
      expectEncoding(encoder, 'Allen', 'ALN', ['ALN']);
      expectEncoding(encoder, 'Allerton', 'ALRT', ['ALRT']);
      expectEncoding(encoder, 'Alsop', 'ALSP', ['ALSP']);
      expectEncoding(encoder, 'Alwein', 'ALN', ['ALN']);
      expectEncoding(encoder, 'Ambler', 'AMPL', ['AMPL']);
      expectEncoding(encoder, 'Andevill', 'ANTF', ['ANTF']);
      expectEncoding(encoder, 'Andrews', 'ANTR', ['ANTR']);
      expectEncoding(encoder, 'Andreyco', 'ANTR', ['ANTR']);
      expectEncoding(encoder, 'Andriesse', 'ANTR', ['ANTR']);
      expectEncoding(encoder, 'Angier', 'ANJ', ['ANJR']);
      expectEncoding(encoder, 'Annabel', 'ANPL', ['ANPL']);
      expectEncoding(encoder, 'Anne', 'AN', ['AN']);
      expectEncoding(encoder, 'Anstye', 'ANST', ['ANST']);
      expectEncoding(encoder, 'Appling', 'APLN', ['APLN']);
      expectEncoding(encoder, 'Apuke', 'APK', ['APK']);
      expectEncoding(encoder, 'Arnold', 'ARNL', ['ARNL']);
      expectEncoding(encoder, 'Ashby', 'AXP', ['AXP']);
      expectEncoding(encoder, 'Astwood', 'ASTT', ['ASTT']);
      expectEncoding(encoder, 'Atkinson', 'ATKN', ['ATKN']);
      expectEncoding(encoder, 'Audley', 'ATL', ['ATL']);
      expectEncoding(encoder, 'Austin', 'ASTN', ['ASTN']);
      expectEncoding(encoder, 'Avenal', 'AFNL', ['AFNL']);
      expectEncoding(encoder, 'Ayer', 'AR', ['AR']);
      expectEncoding(encoder, 'Ayot', 'AT', ['AT']);
      expectEncoding(encoder, 'accede', 'AKST', ['AKST']);
      expectEncoding(encoder, 'accident', 'AKST', ['AKST']);
      expectEncoding(encoder, 'adelsheim', 'ATLS', ['ATLS']);
      expectEncoding(encoder, 'aged', 'AJT', ['AKT']);
      expectEncoding(encoder, 'ageless', 'AJLS', ['AKLS']);
      expectEncoding(encoder, 'agency', 'AJNS', ['AKNS']);
      expectEncoding(encoder, 'aghast', 'AKST', ['AKST']);
      expectEncoding(encoder, 'agio', 'AJ', ['AK']);
      expectEncoding(encoder, 'agrimony', 'AKRM', ['AKRM']);
      expectEncoding(encoder, 'album', 'ALPM', ['ALPM']);
      expectEncoding(encoder, 'alcmene', 'ALKM', ['ALKM']);
      expectEncoding(encoder, 'alehouse', 'ALHS', ['ALHS']);
      expectEncoding(encoder, 'antique', 'ANTK', ['ANTK']);
      expectEncoding(encoder, 'artois', 'ART', ['ARTS']);
      expectEncoding(encoder, 'automation', 'ATMX', ['ATMX']);
      expectEncoding(encoder, 'ARCHITure', 'ARKT', ['ARKT']);
      expectEncoding(encoder, 'Arnoff', 'ARNF', ['ARNF']);
      expectEncoding(encoder, 'Arnow', 'ARN', ['ARNF']);
      expectEncoding(encoder, 'aubrey', 'APR', ['APR']);
      expectEncoding(encoder, 'auto', 'AT', ['AT']);
    });

    test('test batch B', () {
      final encoder = DoubleMetaphone.defaultEncoder;
      expectEncoding(encoder, 'Barto≈°', 'PRT', ['PRT']);
      expectEncoding(encoder, 'Bartosz', 'PRTS', ['PRTX']);
      expectEncoding(encoder, 'Bartosch', 'PRTX', ['PRTX']);
      expectEncoding(encoder, 'Bartos', 'PRTS', ['PRTS']);
      expectEncoding(encoder, 'Babbitt', 'PPT', ['PPT']);
      expectEncoding(encoder, 'Bachelor', 'PXLR', ['PKLR']);
      expectEncoding(encoder, 'Bachelour', 'PXLR', ['PKLR']);
      expectEncoding(encoder, 'Bailey', 'PL', ['PL']);
      expectEncoding(encoder, 'Baivel', 'PFL', ['PFL']);
      expectEncoding(encoder, 'Baker', 'PKR', ['PKR']);
      expectEncoding(encoder, 'Baldwin', 'PLTN', ['PLTN']);
      expectEncoding(encoder, 'Balsley', 'PLSL', ['PLSL']);
      expectEncoding(encoder, 'Barber', 'PRPR', ['PRPR']);
      expectEncoding(encoder, 'Barker', 'PRKR', ['PRKR']);
      expectEncoding(encoder, 'Barlow', 'PRL', ['PRLF']);
      expectEncoding(encoder, 'Barnard', 'PRNR', ['PRNR']);
      expectEncoding(encoder, 'Barnes', 'PRNS', ['PRNS']);
      expectEncoding(encoder, 'Barnsley', 'PRNS', ['PRNS']);
      expectEncoding(encoder, 'Barouxis', 'PRKS', ['PRKS']);
      expectEncoding(encoder, 'Bartlet', 'PRTL', ['PRTL']);
      expectEncoding(encoder, 'Basley', 'PSL', ['PSL']);
      expectEncoding(encoder, 'Basset', 'PST', ['PST']);
      expectEncoding(encoder, 'Bassett', 'PST', ['PST']);
      expectEncoding(encoder, 'Batchlor', 'PXLR', ['PXLR']);
      expectEncoding(encoder, 'Bates', 'PTS', ['PTS']);
      expectEncoding(encoder, 'Batson', 'PTSN', ['PTSN']);
      expectEncoding(encoder, 'Bayes', 'PS', ['PS']);
      expectEncoding(encoder, 'Bayley', 'PL', ['PL']);
      expectEncoding(encoder, 'Beale', 'PL', ['PL']);
      expectEncoding(encoder, 'Beauchamp', 'PXMP', ['PKMP']);
      expectEncoding(encoder, 'Beauclerc', 'PKLR', ['PKLR']);
      expectEncoding(encoder, 'Beech', 'PK', ['PK']);
      expectEncoding(encoder, 'Beers', 'PRS', ['PRS']);
      expectEncoding(encoder, 'Beke', 'PK', ['PK']);
      expectEncoding(encoder, 'Belcher', 'PLXR', ['PLKR']);
      expectEncoding(encoder, 'benign', 'PNN', ['PNKN']);
      expectEncoding(encoder, 'Benjamin', 'PNJM', ['PNJM']);
      expectEncoding(encoder, 'Benningham', 'PNNK', ['PNNK']);
      expectEncoding(encoder, 'Bereford', 'PRFR', ['PRFR']);
      expectEncoding(encoder, 'Bergen', 'PRJN', ['PRKN']);
      expectEncoding(encoder, 'Berkeley', 'PRKL', ['PRKL']);
      expectEncoding(encoder, 'Berry', 'PR', ['PR']);
      expectEncoding(encoder, 'Besse', 'PS', ['PS']);
      expectEncoding(encoder, 'Bessey', 'PS', ['PS']);
      expectEncoding(encoder, 'Bessiles', 'PSLS', ['PSLS']);
      expectEncoding(encoder, 'Bigelow', 'PJL', ['PKLF']);
      expectEncoding(encoder, 'Bigg', 'PK', ['PK']);
      expectEncoding(encoder, 'Bigod', 'PKT', ['PKT']);
      expectEncoding(encoder, 'Billings', 'PLNK', ['PLNK']);
      expectEncoding(encoder, 'Bimper', 'PMPR', ['PMPR']);
      expectEncoding(encoder, 'Binker', 'PNKR', ['PNKR']);
      expectEncoding(encoder, 'Birdsill', 'PRTS', ['PRTS']);
      expectEncoding(encoder, 'Bishop', 'PXP', ['PXP']);
      expectEncoding(encoder, 'Black', 'PLK', ['PLK']);
      expectEncoding(encoder, 'Blagge', 'PLK', ['PLK']);
      expectEncoding(encoder, 'Blake', 'PLK', ['PLK']);
      expectEncoding(encoder, 'Blanck', 'PLNK', ['PLNK']);
      expectEncoding(encoder, 'Bledsoe', 'PLTS', ['PLTS']);
      expectEncoding(encoder, 'Blennerhasset', 'PLNR', ['PLNR']);
      expectEncoding(encoder, 'Blessing', 'PLSN', ['PLSN']);
      expectEncoding(encoder, 'Blewett', 'PLT', ['PLT']);
      expectEncoding(encoder, 'Bloctgoed', 'PLKT', ['PLKT']);
      expectEncoding(encoder, 'Bloetgoet', 'PLTK', ['PLTK']);
      expectEncoding(encoder, 'Bloodgood', 'PLTK', ['PLTK']);
      expectEncoding(encoder, 'Blossom', 'PLSM', ['PLSM']);
      expectEncoding(encoder, 'Blount', 'PLNT', ['PLNT']);
      expectEncoding(encoder, 'Bodine', 'PTN', ['PTN']);
      expectEncoding(encoder, 'Bodman', 'PTMN', ['PTMN']);
      expectEncoding(encoder, 'BonCoeur', 'PNKR', ['PNKR']);
      expectEncoding(encoder, 'Bond', 'PNT', ['PNT']);
      expectEncoding(encoder, 'Boscawen', 'PSKN', ['PSKN']);
      expectEncoding(encoder, 'Bosworth', 'PSR0', ['PSRT']);
      expectEncoding(encoder, 'Bouchier', 'PX', ['PKR']);
      expectEncoding(encoder, 'Bowne', 'PN', ['PN']);
      expectEncoding(encoder, 'Bradbury', 'PRTP', ['PRTP']);
      expectEncoding(encoder, 'Bradder', 'PRTR', ['PRTR']);
      expectEncoding(encoder, 'Bradford', 'PRTF', ['PRTF']);
      expectEncoding(encoder, 'Bradstreet', 'PRTS', ['PRTS']);
      expectEncoding(encoder, 'Braham', 'PRHM', ['PRHM']);
      expectEncoding(encoder, 'Brailsford', 'PRLS', ['PRLS']);
      expectEncoding(encoder, 'Brainard', 'PRNR', ['PRNR']);
      expectEncoding(encoder, 'Brandish', 'PRNT', ['PRNT']);
      expectEncoding(encoder, 'Braun', 'PRN', ['PRN']);
      expectEncoding(encoder, 'Brecc', 'PRK', ['PRK']);
      expectEncoding(encoder, 'Brent', 'PRNT', ['PRNT']);
      expectEncoding(encoder, 'Brenton', 'PRNT', ['PRNT']);
      expectEncoding(encoder, 'Briggs', 'PRKS', ['PRKS']);
      expectEncoding(encoder, 'Brigham', 'PRM', ['PRM']);
      expectEncoding(encoder, 'Brobst', 'PRPS', ['PRPS']);
      expectEncoding(encoder, 'Brome', 'PRM', ['PRM']);
      expectEncoding(encoder, 'Bronson', 'PRNS', ['PRNS']);
      expectEncoding(encoder, 'Brooks', 'PRKS', ['PRKS']);
      expectEncoding(encoder, 'Brouillard', 'PRLR', ['PRLR']);
      expectEncoding(encoder, 'Brown', 'PRN', ['PRN']);
      expectEncoding(encoder, 'Browne', 'PRN', ['PRN']);
      expectEncoding(encoder, 'Brownell', 'PRNL', ['PRNL']);
      expectEncoding(encoder, 'Bruley', 'PRL', ['PRL']);
      expectEncoding(encoder, 'Bryant', 'PRNT', ['PRNT']);
      expectEncoding(encoder, 'Brzozowski', 'PRSS', ['PRTS']);
      expectEncoding(encoder, 'Buide', 'PT', ['PT']);
      expectEncoding(encoder, 'Bulmer', 'PLMR', ['PLMR']);
      expectEncoding(encoder, 'Bunker', 'PNKR', ['PNKR']);
      expectEncoding(encoder, 'Burden', 'PRTN', ['PRTN']);
      expectEncoding(encoder, 'Burge', 'PRJ', ['PRK']);
      expectEncoding(encoder, 'Burgoyne', 'PRKN', ['PRKN']);
      expectEncoding(encoder, 'Burke', 'PRK', ['PRK']);
      expectEncoding(encoder, 'Burnett', 'PRNT', ['PRNT']);
      expectEncoding(encoder, 'Burpee', 'PRP', ['PRP']);
      expectEncoding(encoder, 'Bursley', 'PRSL', ['PRSL']);
      expectEncoding(encoder, 'Burton', 'PRTN', ['PRTN']);
      expectEncoding(encoder, 'Bushnell', 'PXNL', ['PXNL']);
      expectEncoding(encoder, 'Buss', 'PS', ['PS']);
      expectEncoding(encoder, 'Buswell', 'PSL', ['PSL']);
      expectEncoding(encoder, 'Butler', 'PTLR', ['PTLR']);
      expectEncoding(encoder, 'bacchus', 'PKS', ['PKS']);
      expectEncoding(encoder, 'bacci', 'PX', ['PX']);
      expectEncoding(encoder, 'bajador', 'PJTR', ['PHTR']);
      expectEncoding(encoder, 'bellocchio', 'PLX', ['PLX']);
      expectEncoding(encoder, 'bertucci', 'PRTX', ['PRTX']);
      expectEncoding(encoder, 'biaggi', 'PJ', ['PK']);
      expectEncoding(encoder, 'bough', 'P', ['P']);
      expectEncoding(encoder, 'breaux', 'PR', ['PR']);
      expectEncoding(encoder, 'broughton', 'PRTN', ['PRTN']);
      expectEncoding(encoder, 'brian', 'PRN', ['PRN']);
      expectEncoding(encoder, 'bryan', 'PRN', ['PRN']);
      expectEncoding(encoder, 'bryce', 'PRS', ['PRS']);
      expectEncoding(encoder, 'bob', 'PP', ['PP']);
    });

    test('test batch C', () {
      final encoder = DoubleMetaphone.defaultEncoder;
      expectEncoding(encoder, 'Calkin', 'KLKN', ['KLKN']);
      expectEncoding(encoder, 'Canada', 'KNT', ['KNT']);
      expectEncoding(encoder, 'Canmore', 'KNMR', ['KNMR']);
      expectEncoding(encoder, 'Canney', 'KN', ['KN']);
      expectEncoding(encoder, 'Capet', 'KPT', ['KPT']);
      expectEncoding(encoder, 'Card', 'KRT', ['KRT']);
      expectEncoding(encoder, 'Carman', 'KRMN', ['KRMN']);
      expectEncoding(encoder, 'Carpenter', 'KRPN', ['KRPN']);
      expectEncoding(encoder, 'Cartwright', 'KRTR', ['KRTR']);
      expectEncoding(encoder, 'Casey', 'KS', ['KS']);
      expectEncoding(encoder, 'Catterfield', 'KTRF', ['KTRF']);
      expectEncoding(encoder, 'Ceeley', 'SL', ['SL']);
      expectEncoding(encoder, 'Chambers', 'XMPR', ['XMPR']);
      expectEncoding(encoder, 'Champion', 'XMPN', ['XMPN']);
      expectEncoding(encoder, 'Chapman', 'XPMN', ['XPMN']);
      expectEncoding(encoder, 'Chase', 'XS', ['XS']);
      expectEncoding(encoder, 'Cheney', 'XN', ['XN']);
      expectEncoding(encoder, 'Chetwynd', 'XTNT', ['XTNT']);
      expectEncoding(encoder, 'Chevalier', 'XFL', ['XFLR']);
      expectEncoding(encoder, 'Chillingsworth', 'XLNK', ['XLNK']);
      expectEncoding(encoder, 'Christie', 'KRST', ['KRST']);
      expectEncoding(encoder, 'Chubbuck', 'XPK', ['XPK']);
      expectEncoding(encoder, 'Church', 'XRX', ['XRK']);
      expectEncoding(encoder, 'Clark', 'KLRK', ['KLRK']);
      expectEncoding(encoder, 'Clarke', 'KLRK', ['KLRK']);
      expectEncoding(encoder, 'Cleare', 'KLR', ['KLR']);
      expectEncoding(encoder, 'Clement', 'KLMN', ['KLMN']);
      expectEncoding(encoder, 'Clerke', 'KLRK', ['KLRK']);
      expectEncoding(encoder, 'Clibben', 'KLPN', ['KLPN']);
      expectEncoding(encoder, 'Clifford', 'KLFR', ['KLFR']);
      expectEncoding(encoder, 'Clivedon', 'KLFT', ['KLFT']);
      expectEncoding(encoder, 'Close', 'KLS', ['KLS']);
      expectEncoding(encoder, 'Clothilde', 'KL0L', ['KLTL']);
      expectEncoding(encoder, 'Cobb', 'KP', ['KP']);
      expectEncoding(encoder, 'Coburn', 'KPRN', ['KPRN']);
      expectEncoding(encoder, 'Coburne', 'KPRN', ['KPRN']);
      expectEncoding(encoder, 'Cocke', 'KK', ['KK']);
      expectEncoding(encoder, 'Coffin', 'KFN', ['KFN']);
      expectEncoding(encoder, 'Coffyn', 'KFN', ['KFN']);
      expectEncoding(encoder, 'Colborne', 'KLPR', ['KLPR']);
      expectEncoding(encoder, 'Colby', 'KLP', ['KLP']);
      expectEncoding(encoder, 'Cole', 'KL', ['KL']);
      expectEncoding(encoder, 'Coleman', 'KLMN', ['KLMN']);
      expectEncoding(encoder, 'Collier', 'KL', ['KLR']);
      expectEncoding(encoder, 'Compton', 'KMPT', ['KMPT']);
      expectEncoding(encoder, 'Cone', 'KN', ['KN']);
      expectEncoding(encoder, 'Cook', 'KK', ['KK']);
      expectEncoding(encoder, 'Cooke', 'KK', ['KK']);
      expectEncoding(encoder, 'Cooper', 'KPR', ['KPR']);
      expectEncoding(encoder, 'Copperthwaite', 'KPR0', ['KPRT']);
      expectEncoding(encoder, 'Corbet', 'KRPT', ['KRPT']);
      expectEncoding(encoder, 'Corell', 'KRL', ['KRL']);
      expectEncoding(encoder, 'Corey', 'KR', ['KR']);
      expectEncoding(encoder, 'Corlies', 'KRLS', ['KRLS']);
      expectEncoding(encoder, 'Corneliszen', 'KRNL', ['KRNL']);
      expectEncoding(encoder, 'Cornelius', 'KRNL', ['KRNL']);
      expectEncoding(encoder, 'Cornwallis', 'KRNL', ['KRNL']);
      expectEncoding(encoder, 'Cosgrove', 'KSKR', ['KSKR']);
      expectEncoding(encoder, 'Count of Brionne', 'KNTF', ['KNTF']);
      expectEncoding(encoder, 'Covill', 'KFL', ['KFL']);
      expectEncoding(encoder, 'Cowperthwaite', 'KPR0', ['KPRT']);
      expectEncoding(encoder, 'Cowperwaite', 'KPRT', ['KPRT']);
      expectEncoding(encoder, 'Crane', 'KRN', ['KRN']);
      expectEncoding(encoder, 'Creagmile', 'KRKM', ['KRKM']);
      expectEncoding(encoder, 'Crew', 'KR', ['KRF']);
      expectEncoding(encoder, 'Crispin', 'KRSP', ['KRSP']);
      expectEncoding(encoder, 'Crocker', 'KRKR', ['KRKR']);
      expectEncoding(encoder, 'Crockett', 'KRKT', ['KRKT']);
      expectEncoding(encoder, 'Crosby', 'KRSP', ['KRSP']);
      expectEncoding(encoder, 'Crump', 'KRMP', ['KRMP']);
      expectEncoding(encoder, 'Cunningham', 'KNNK', ['KNNK']);
      expectEncoding(encoder, 'Curtis', 'KRTS', ['KRTS']);
      expectEncoding(encoder, 'Cutha', 'K0', ['KT']);
      expectEncoding(encoder, 'Cutter', 'KTR', ['KTR']);
      expectEncoding(encoder, 'cabrillo', 'KPRL', ['KPR']);
      expectEncoding(encoder, 'caesar', 'SSR', ['SSR']);
      expectEncoding(encoder, 'cagney', 'KKN', ['KKN']);
      expectEncoding(encoder, 'campbell', 'KMPL', ['KMPL']);
      expectEncoding(encoder, 'carlisle', 'KRLL', ['KRLL']);
      expectEncoding(encoder, 'carlysle', 'KRLL', ['KRLL']);
      expectEncoding(encoder, 'chemistry', 'KMST', ['KMST']);
      expectEncoding(encoder, 'chianti', 'KNT', ['KNT']);
      expectEncoding(encoder, 'chorus', 'KRS', ['KRS']);
      expectEncoding(encoder, 'cough', 'KF', ['KF']);
      expectEncoding(encoder, 'czerny', 'SRN', ['XRN']);
      expectEncoding(encoder, 'cambrillo', 'KMPR', ['KMPR']);
      expectEncoding(encoder, 'catherine', 'K0RN', ['KTRN']);
      expectEncoding(encoder, 'Chile', 'XL', ['XL']);
    });

    test('test batch D', () {
      final encoder = DoubleMetaphone.defaultEncoder;
      expectEncoding(encoder, 'DAVIS', 'TFS', ['TFS']);
      expectEncoding(encoder, 'Dabinott', 'TPNT', ['TPNT']);
      expectEncoding(encoder, 'Dacre', 'TKR', ['TKR']);
      expectEncoding(encoder, 'Daggett', 'TKT', ['TKT']);
      expectEncoding(encoder, 'Danvers', 'TNFR', ['TNFR']);
      expectEncoding(encoder, 'Darcy', 'TRS', ['TRS']);
      expectEncoding(encoder, 'Davis', 'TFS', ['TFS']);
      expectEncoding(encoder, 'Dawn', 'TN', ['TN']);
      expectEncoding(encoder, 'Dawson', 'TSN', ['TSN']);
      expectEncoding(encoder, 'Day', 'T', ['T']);
      expectEncoding(encoder, 'Daye', 'T', ['T']);
      expectEncoding(encoder, 'DeGrenier', 'TKRN', ['TKRN']);
      expectEncoding(encoder, 'Dean', 'TN', ['TN']);
      expectEncoding(encoder, 'Deekindaugh', 'TKNT', ['TKNT']);
      expectEncoding(encoder, 'Dennis', 'TNS', ['TNS']);
      expectEncoding(encoder, 'Denny', 'TN', ['TN']);
      expectEncoding(encoder, 'Denton', 'TNTN', ['TNTN']);
      expectEncoding(encoder, 'Desborough', 'TSPR', ['TSPR']);
      expectEncoding(encoder, 'Despenser', 'TSPN', ['TSPN']);
      expectEncoding(encoder, 'Deverill', 'TFRL', ['TFRL']);
      expectEncoding(encoder, 'Devine', 'TFN', ['TFN']);
      expectEncoding(encoder, 'Dexter', 'TKST', ['TKST']);
      expectEncoding(encoder, 'Dillaway', 'TL', ['TL']);
      expectEncoding(encoder, 'Dimmick', 'TMK', ['TMK']);
      expectEncoding(encoder, 'Dinan', 'TNN', ['TNN']);
      expectEncoding(encoder, 'Dix', 'TKS', ['TKS']);
      expectEncoding(encoder, 'Doggett', 'TKT', ['TKT']);
      expectEncoding(encoder, 'Donahue', 'TNH', ['TNH']);
      expectEncoding(encoder, 'Dorfman', 'TRFM', ['TRFM']);
      expectEncoding(encoder, 'Dorris', 'TRS', ['TRS']);
      expectEncoding(encoder, 'Dow', 'T', ['TF']);
      expectEncoding(encoder, 'Downey', 'TN', ['TN']);
      expectEncoding(encoder, 'Downing', 'TNNK', ['TNNK']);
      expectEncoding(encoder, 'Dowsett', 'TST', ['TST']);
      expectEncoding(encoder, 'Duck?', 'TK', ['TK']);
      expectEncoding(encoder, 'Dudley', 'TTL', ['TTL']);
      expectEncoding(encoder, 'Duffy', 'TF', ['TF']);
      expectEncoding(encoder, 'Dunn', 'TN', ['TN']);
      expectEncoding(encoder, 'Dunsterville', 'TNST', ['TNST']);
      expectEncoding(encoder, 'Durrant', 'TRNT', ['TRNT']);
      expectEncoding(encoder, 'Durrin', 'TRN', ['TRN']);
      expectEncoding(encoder, 'Dustin', 'TSTN', ['TSTN']);
      expectEncoding(encoder, 'Duston', 'TSTN', ['TSTN']);
      expectEncoding(encoder, 'deffenbacher', 'TFNP', ['TFNP']);
      expectEncoding(encoder, 'dumb', 'TM', ['TM']);
      expectEncoding(encoder, 'DANGER', 'TNJR', ['TNKR']);
      expectEncoding(encoder, 'Dallas', 'TLS', ['TLS']);
      expectEncoding(encoder, 'dave', 'TF', ['TF']);
    });

    test('test batch E', () {
      final encoder = DoubleMetaphone.defaultEncoder;
      expectEncoding(encoder, 'Eames', 'AMS', ['AMS']);
      expectEncoding(encoder, 'Early', 'ARL', ['ARL']);
      expectEncoding(encoder, 'Easty', 'AST', ['AST']);
      expectEncoding(encoder, 'Ebbett', 'APT', ['APT']);
      expectEncoding(encoder, 'Eberbach', 'APRP', ['APRP']);
      expectEncoding(encoder, 'Eberhard', 'APRR', ['APRR']);
      expectEncoding(encoder, 'Eddy', 'AT', ['AT']);
      expectEncoding(encoder, 'Edenden', 'ATNT', ['ATNT']);
      expectEncoding(encoder, 'Edwards', 'ATRT', ['ATRT']);
      expectEncoding(encoder, 'Eglinton', 'AKLN', ['ALNT']);
      expectEncoding(encoder, 'Eliot', 'ALT', ['ALT']);
      expectEncoding(encoder, 'Elizabeth', 'ALSP', ['ALSP']);
      expectEncoding(encoder, 'Ellis', 'ALS', ['ALS']);
      expectEncoding(encoder, 'Ellison', 'ALSN', ['ALSN']);
      expectEncoding(encoder, 'Ellot', 'ALT', ['ALT']);
      expectEncoding(encoder, 'Elny', 'ALN', ['ALN']);
      expectEncoding(encoder, 'Elsner', 'ALSN', ['ALSN']);
      expectEncoding(encoder, 'Emerson', 'AMRS', ['AMRS']);
      expectEncoding(encoder, 'Empson', 'AMPS', ['AMPS']);
      expectEncoding(encoder, 'Est', 'AST', ['AST']);
      expectEncoding(encoder, 'Estabrook', 'ASTP', ['ASTP']);
      expectEncoding(encoder, 'Estes', 'ASTS', ['ASTS']);
      expectEncoding(encoder, 'Estey', 'AST', ['AST']);
      expectEncoding(encoder, 'Evans', 'AFNS', ['AFNS']);
      expectEncoding(encoder, 'edgar', 'ATKR', ['ATKR']);
      expectEncoding(encoder, 'edge', 'AJ', ['AJ']);
      expectEncoding(encoder, 'eric', 'ARK', ['ARK']);
    });

    test('test batch F', () {
      final encoder = DoubleMetaphone.defaultEncoder;
      expectEncoding(encoder, 'Fallowell', 'FLL', ['FLL']);
      expectEncoding(encoder, 'Farnsworth', 'FRNS', ['FRNS']);
      expectEncoding(encoder, 'Feake', 'FK', ['FK']);
      expectEncoding(encoder, 'Feke', 'FK', ['FK']);
      expectEncoding(encoder, 'Fellows', 'FLS', ['FLS']);
      expectEncoding(encoder, 'Fettiplace', 'FTPL', ['FTPL']);
      expectEncoding(encoder, 'Finney', 'FN', ['FN']);
      expectEncoding(encoder, 'Fischer', 'FXR', ['FSKR']);
      expectEncoding(encoder, 'Fisher', 'FXR', ['FXR']);
      expectEncoding(encoder, 'Fisk', 'FSK', ['FSK']);
      expectEncoding(encoder, 'Fiske', 'FSK', ['FSK']);
      expectEncoding(encoder, 'Fletcher', 'FLXR', ['FLXR']);
      expectEncoding(encoder, 'Folger', 'FLKR', ['FLJR']);
      expectEncoding(encoder, 'Foliot', 'FLT', ['FLT']);
      expectEncoding(encoder, 'Folyot', 'FLT', ['FLT']);
      expectEncoding(encoder, 'Fones', 'FNS', ['FNS']);
      expectEncoding(encoder, 'Fokker', 'FKR', ['FKR']);
      expectEncoding(encoder, 'Fordham', 'FRTM', ['FRTM']);
      expectEncoding(encoder, 'Forstner', 'FRST', ['FRST']);
      expectEncoding(encoder, 'Fosten', 'FSTN', ['FSTN']);
      expectEncoding(encoder, 'Foster', 'FSTR', ['FSTR']);
      expectEncoding(encoder, 'Foulke', 'FLK', ['FLK']);
      expectEncoding(encoder, 'Fowler', 'FLR', ['FLR']);
      expectEncoding(encoder, 'Foxwell', 'FKSL', ['FKSL']);
      expectEncoding(encoder, 'Fraley', 'FRL', ['FRL']);
      expectEncoding(encoder, 'Franceys', 'FRNS', ['FRNS']);
      expectEncoding(encoder, 'Franke', 'FRNK', ['FRNK']);
      expectEncoding(encoder, 'Frascella', 'FRSL', ['FRSL']);
      expectEncoding(encoder, 'Frazer', 'FRSR', ['FRSR']);
      expectEncoding(encoder, 'Fredd', 'FRT', ['FRT']);
      expectEncoding(encoder, 'Freeman', 'FRMN', ['FRMN']);
      expectEncoding(encoder, 'French', 'FRNX', ['FRNK']);
      expectEncoding(encoder, 'Freville', 'FRFL', ['FRFL']);
      expectEncoding(encoder, 'Frey', 'FR', ['FR']);
      expectEncoding(encoder, 'Frick', 'FRK', ['FRK']);
      expectEncoding(encoder, 'Frier', 'FR', ['FRR']);
      expectEncoding(encoder, 'Froe', 'FR', ['FR']);
      expectEncoding(encoder, 'Frorer', 'FRRR', ['FRRR']);
      expectEncoding(encoder, 'Frost', 'FRST', ['FRST']);
      expectEncoding(encoder, 'Frothingham', 'FR0N', ['FRTN']);
      expectEncoding(encoder, 'Fry', 'FR', ['FR']);
      expectEncoding(encoder, 'filipowicz', 'FLPT', ['FLPF']);
      expectEncoding(encoder, 'focaccia', 'FKX', ['FKX']);
    });

    test('test batch G', () {
      final encoder = DoubleMetaphone.defaultEncoder;
      expectEncoding(encoder, 'Gaffney', 'KFN', ['KFN']);
      expectEncoding(encoder, 'Gage', 'KJ', ['KK']);
      expectEncoding(encoder, 'Gallion', 'KLN', ['KLN']);
      expectEncoding(encoder, 'Gallishan', 'KLXN', ['KLXN']);
      expectEncoding(encoder, 'Gamble', 'KMPL', ['KMPL']);
      expectEncoding(encoder, 'garage', 'KRJ', ['KRK']);
      expectEncoding(encoder, 'Garbrand', 'KRPR', ['KRPR']);
      expectEncoding(encoder, 'Gardner', 'KRTN', ['KRTN']);
      expectEncoding(encoder, 'Garrett', 'KRT', ['KRT']);
      expectEncoding(encoder, 'Gassner', 'KSNR', ['KSNR']);
      expectEncoding(encoder, 'Gater', 'KTR', ['KTR']);
      expectEncoding(encoder, 'Gaunt', 'KNT', ['KNT']);
      expectEncoding(encoder, 'Gayer', 'KR', ['KR']);
      expectEncoding(encoder, 'George', 'JRJ', ['KRK']);
      expectEncoding(encoder, 'Gerken', 'KRKN', ['JRKN']);
      expectEncoding(encoder, 'Gerritsen', 'KRTS', ['JRTS']);
      expectEncoding(encoder, 'Gibbs', 'KPS', ['JPS']);
      expectEncoding(encoder, 'Giffard', 'JFRT', ['KFRT']);
      expectEncoding(encoder, 'Gilbert', 'KLPR', ['JLPR']);
      expectEncoding(encoder, 'Gill', 'KL', ['JL']);
      expectEncoding(encoder, 'Gilman', 'KLMN', ['JLMN']);
      expectEncoding(encoder, 'Glass', 'KLS', ['KLS']);
      expectEncoding(encoder, 'Godfrey', 'KTFR', ['KTFR']);
      expectEncoding(encoder, 'Godwin', 'KTN', ['KTN']);
      expectEncoding(encoder, 'Goodale', 'KTL', ['KTL']);
      expectEncoding(encoder, 'Goodnow', 'KTN', ['KTNF']);
      expectEncoding(encoder, 'Gorham', 'KRM', ['KRM']);
      expectEncoding(encoder, 'Goseline', 'KSLN', ['KSLN']);
      expectEncoding(encoder, 'Gott', 'KT', ['KT']);
      expectEncoding(encoder, 'Gould', 'KLT', ['KLT']);
      expectEncoding(encoder, 'Grafton', 'KRFT', ['KRFT']);
      expectEncoding(encoder, 'Grant', 'KRNT', ['KRNT']);
      expectEncoding(encoder, 'Gray', 'KR', ['KR']);
      expectEncoding(encoder, 'Green', 'KRN', ['KRN']);
      expectEncoding(encoder, 'Griffin', 'KRFN', ['KRFN']);
      expectEncoding(encoder, 'Grill', 'KRL', ['KRL']);
      expectEncoding(encoder, 'Grim', 'KRM', ['KRM']);
      expectEncoding(encoder, 'Grisgonelle', 'KRSK', ['KRSK']);
      expectEncoding(encoder, 'Gross', 'KRS', ['KRS']);
      expectEncoding(encoder, 'Guba', 'KP', ['KP']);
      expectEncoding(encoder, 'Gybbes', 'KPS', ['JPS']);
      expectEncoding(encoder, 'gallegos', 'KLKS', ['KKS']);
      expectEncoding(encoder, 'gambrelli', 'KMPR', ['KMPR']);
      expectEncoding(encoder, 'geithain', 'K0N', ['JTN']);
      expectEncoding(encoder, 'ghiradelli', 'JRTL', ['JRTL']);
      expectEncoding(encoder, 'ghislane', 'JLN', ['JLN']);
      expectEncoding(encoder, 'gough', 'KF', ['KF']);
      expectEncoding(encoder, 'geoff', 'JF', ['KF']);
    });

    test('test batch H', () {
      final encoder = DoubleMetaphone.defaultEncoder;
      expectEncoding(encoder, 'Haburne', 'HPRN', ['HPRN']);
      expectEncoding(encoder, 'Hackburne', 'HKPR', ['HKPR']);
      expectEncoding(encoder, 'Haddon?', 'HTN', ['HTN']);
      expectEncoding(encoder, 'Haines', 'HNS', ['HNS']);
      expectEncoding(encoder, 'Hale', 'HL', ['HL']);
      expectEncoding(encoder, 'Hall', 'HL', ['HL']);
      expectEncoding(encoder, 'Hallet', 'HLT', ['HLT']);
      expectEncoding(encoder, 'Hallock', 'HLK', ['HLK']);
      expectEncoding(encoder, 'Halstead', 'HLST', ['HLST']);
      expectEncoding(encoder, 'Hammond', 'HMNT', ['HMNT']);
      expectEncoding(encoder, 'Hance', 'HNS', ['HNS']);
      expectEncoding(encoder, 'Handy', 'HNT', ['HNT']);
      expectEncoding(encoder, 'Hanson', 'HNSN', ['HNSN']);
      expectEncoding(encoder, 'Harasek', 'HRSK', ['HRSK']);
      expectEncoding(encoder, 'Harcourt', 'HRKR', ['HRKR']);
      expectEncoding(encoder, 'Hardy', 'HRT', ['HRT']);
      expectEncoding(encoder, 'Harlock', 'HRLK', ['HRLK']);
      expectEncoding(encoder, 'Harris', 'HRS', ['HRS']);
      expectEncoding(encoder, 'Hartley', 'HRTL', ['HRTL']);
      expectEncoding(encoder, 'Harvey', 'HRF', ['HRF']);
      expectEncoding(encoder, 'Harvie', 'HRF', ['HRF']);
      expectEncoding(encoder, 'Harwood', 'HRT', ['HRT']);
      expectEncoding(encoder, 'Hathaway', 'H0', ['HT']);
      expectEncoding(encoder, 'Haukeness', 'HKNS', ['HKNS']);
      expectEncoding(encoder, 'Hawkes', 'HKS', ['HKS']);
      expectEncoding(encoder, 'Hawkhurst', 'HKRS', ['HKRS']);
      expectEncoding(encoder, 'Hawkins', 'HKNS', ['HKNS']);
      expectEncoding(encoder, 'Hawley', 'HL', ['HL']);
      expectEncoding(encoder, 'Heald', 'HLT', ['HLT']);
      expectEncoding(encoder, 'Helsdon', 'HLST', ['HLST']);
      expectEncoding(encoder, 'Hemenway', 'HMN', ['HMN']);
      expectEncoding(encoder, 'Hemmenway', 'HMN', ['HMN']);
      expectEncoding(encoder, 'Henck', 'HNK', ['HNK']);
      expectEncoding(encoder, 'Henderson', 'HNTR', ['HNTR']);
      expectEncoding(encoder, 'Hendricks', 'HNTR', ['HNTR']);
      expectEncoding(encoder, 'Hersey', 'HRS', ['HRS']);
      expectEncoding(encoder, 'Hewes', 'HS', ['HS']);
      expectEncoding(encoder, 'Heyman', 'HMN', ['HMN']);
      expectEncoding(encoder, 'Hicks', 'HKS', ['HKS']);
      expectEncoding(encoder, 'Hidden', 'HTN', ['HTN']);
      expectEncoding(encoder, 'Higgs', 'HKS', ['HKS']);
      expectEncoding(encoder, 'Hill', 'HL', ['HL']);
      expectEncoding(encoder, 'Hills', 'HLS', ['HLS']);
      expectEncoding(encoder, 'Hinckley', 'HNKL', ['HNKL']);
      expectEncoding(encoder, 'Hipwell', 'HPL', ['HPL']);
      expectEncoding(encoder, 'Hobart', 'HPRT', ['HPRT']);
      expectEncoding(encoder, 'Hoben', 'HPN', ['HPN']);
      expectEncoding(encoder, 'Hoffmann', 'HFMN', ['HFMN']);
      expectEncoding(encoder, 'Hogan', 'HKN', ['HKN']);
      expectEncoding(encoder, 'Holmes', 'HLMS', ['HLMS']);
      expectEncoding(encoder, 'Hoo', 'H', ['H']);
      expectEncoding(encoder, 'Hooker', 'HKR', ['HKR']);
      expectEncoding(encoder, 'Hopcott', 'HPKT', ['HPKT']);
      expectEncoding(encoder, 'Hopkins', 'HPKN', ['HPKN']);
      expectEncoding(encoder, 'Hopkinson', 'HPKN', ['HPKN']);
      expectEncoding(encoder, 'Hornsey', 'HRNS', ['HRNS']);
      expectEncoding(encoder, 'Houckgeest', 'HKJS', ['HKKS']);
      expectEncoding(encoder, 'Hough', 'H', ['H']);
      expectEncoding(encoder, 'Houstin', 'HSTN', ['HSTN']);
      expectEncoding(encoder, 'Hovvi', 'HF', ['HF']);
      expectEncoding(encoder, 'How', 'H', ['HF']);
      expectEncoding(encoder, 'Howe', 'H', ['H']);
      expectEncoding(encoder, 'Howland', 'HLNT', ['HLNT']);
      expectEncoding(encoder, 'Hubner', 'HPNR', ['HPNR']);
      expectEncoding(encoder, 'Hudnut', 'HTNT', ['HTNT']);
      expectEncoding(encoder, 'Hughes', 'HS', ['HS']);
      expectEncoding(encoder, 'Hull', 'HL', ['HL']);
      expectEncoding(encoder, 'Hulme', 'HLM', ['HLM']);
      expectEncoding(encoder, 'Hume', 'HM', ['HM']);
      expectEncoding(encoder, 'Hundertumark', 'HNTR', ['HNTR']);
      expectEncoding(encoder, 'Hundley', 'HNTL', ['HNTL']);
      expectEncoding(encoder, 'Hungerford', 'HNKR', ['HNJR']);
      expectEncoding(encoder, 'Hunt', 'HNT', ['HNT']);
      expectEncoding(encoder, 'Hurst', 'HRST', ['HRST']);
      expectEncoding(encoder, 'Husbands', 'HSPN', ['HSPN']);
      expectEncoding(encoder, 'Hussey', 'HS', ['HS']);
      expectEncoding(encoder, 'Husted', 'HSTT', ['HSTT']);
      expectEncoding(encoder, 'Hutchins', 'HXNS', ['HXNS']);
      expectEncoding(encoder, 'Hutchinson', 'HXNS', ['HXNS']);
      expectEncoding(encoder, 'Huttinger', 'HTNK', ['HTNJ']);
      expectEncoding(encoder, 'Huybertsen', 'HPRT', ['HPRT']);
      expectEncoding(encoder, 'hartheim', 'HR0M', ['HRTM']);
      expectEncoding(encoder, 'heimsheim', 'HMSM', ['HMSM']);
      expectEncoding(encoder, 'hochmeier', 'HKMR', ['HKMR']);
      expectEncoding(encoder, 'hugh', 'H', ['H']);
      expectEncoding(encoder, 'hunger', 'HNKR', ['HNJR']);
      expectEncoding(encoder, 'hungry', 'HNKR', ['HNKR']);
      expectEncoding(encoder, 'heidi', 'HT', ['HT']);
    });

    test('test batch I', () {
      final encoder = DoubleMetaphone.defaultEncoder;
      expectEncoding(encoder, 'island', 'ALNT', ['ALNT']);
      expectEncoding(encoder, 'isle', 'AL', ['AL']);
      expectEncoding(encoder, 'Iddenden', 'ATNT', ['ATNT']);
      expectEncoding(encoder, 'Ingraham', 'ANKR', ['ANKR']);
      expectEncoding(encoder, 'Ives', 'AFS', ['AFS']);
    });

    test('test batch J', () {
      final encoder = DoubleMetaphone.defaultEncoder;
      expectEncoding(encoder, 'Jackson', 'JKSN', ['AKSN']);
      expectEncoding(encoder, 'Jacob', 'JKP', ['AKP']);
      expectEncoding(encoder, 'Jans', 'JNS', ['ANS']);
      expectEncoding(encoder, 'Jenkins', 'JNKN', ['ANKN']);
      expectEncoding(encoder, 'Jewett', 'JT', ['AT']);
      expectEncoding(encoder, 'Jewitt', 'JT', ['AT']);
      expectEncoding(encoder, 'Johnson', 'JNSN', ['ANSN']);
      expectEncoding(encoder, 'Jones', 'JNS', ['ANS']);
      expectEncoding(encoder, 'Josephine', 'JSFN', ['HSFN']);
      expectEncoding(encoder, 'Joqqi', 'JK', ['AK']);
      expectEncoding(encoder, 'Judd', 'JT', ['AT']);
      expectEncoding(encoder, 'June', 'JN', ['AN']);
      expectEncoding(encoder, 'Jankelowicz', 'JNKL', ['ANKL']);
      expectEncoding(encoder, 'jose', 'HS', ['HS']);
    });

    test('test batch K', () {
      final encoder = DoubleMetaphone.defaultEncoder;
      expectEncoding(encoder, 'Kamarowska', 'KMRS', ['KMRS']);
      expectEncoding(encoder, 'Kay', 'K', ['K']);
      expectEncoding(encoder, 'Kelley', 'KL', ['KL']);
      expectEncoding(encoder, 'Kelly', 'KL', ['KL']);
      expectEncoding(encoder, 'Keymber', 'KMPR', ['KMPR']);
      expectEncoding(encoder, 'Keynes', 'KNS', ['KNS']);
      expectEncoding(encoder, 'Kilham', 'KLM', ['KLM']);
      expectEncoding(encoder, 'Kim', 'KM', ['KM']);
      expectEncoding(encoder, 'Kimball', 'KMPL', ['KMPL']);
      expectEncoding(encoder, 'King', 'KNK', ['KNK']);
      expectEncoding(encoder, 'Kinsey', 'KNS', ['KNS']);
      expectEncoding(encoder, 'Kirk', 'KRK', ['KRK']);
      expectEncoding(encoder, 'Kirton', 'KRTN', ['KRTN']);
      expectEncoding(encoder, 'Kistler', 'KSTL', ['KSTL']);
      expectEncoding(encoder, 'Kitchen', 'KXN', ['KXN']);
      expectEncoding(encoder, 'Kitson', 'KTSN', ['KTSN']);
      expectEncoding(encoder, 'Klett', 'KLT', ['KLT']);
      expectEncoding(encoder, 'Kline', 'KLN', ['KLN']);
      expectEncoding(encoder, 'Knapp', 'NP', ['NP']);
      expectEncoding(encoder, 'Knight', 'NT', ['NT']);
      expectEncoding(encoder, 'Knote', 'NT', ['NT']);
      expectEncoding(encoder, 'Knott', 'NT', ['NT']);
      expectEncoding(encoder, 'Knox', 'NKS', ['NKS']);
      expectEncoding(encoder, 'Koeller', 'KLR', ['KLR']);
      expectEncoding(encoder, 'Kuczewski', 'KSSK', ['KXFS']);
      expectEncoding(encoder, 'katherine', 'K0RN', ['KTRN']);
    });

    test('test batch L', () {
      final encoder = DoubleMetaphone.defaultEncoder;
      expectEncoding(encoder, 'Laimbeer', 'LMPR', ['LMPR']);
      expectEncoding(encoder, 'Lamb', 'LMP', ['LMP']);
      expectEncoding(encoder, 'Lambertson', 'LMPR', ['LMPR']);
      expectEncoding(encoder, 'Lancto', 'LNKT', ['LNKT']);
      expectEncoding(encoder, 'Landry', 'LNTR', ['LNTR']);
      expectEncoding(encoder, 'Lane', 'LN', ['LN']);
      expectEncoding(encoder, 'Langendyck', 'LNJN', ['LNKN']);
      expectEncoding(encoder, 'Langer', 'LNKR', ['LNJR']);
      expectEncoding(encoder, 'Langford', 'LNKF', ['LNKF']);
      expectEncoding(encoder, 'Lantersee', 'LNTR', ['LNTR']);
      expectEncoding(encoder, 'Laquer', 'LKR', ['LKR']);
      expectEncoding(encoder, 'Larkin', 'LRKN', ['LRKN']);
      expectEncoding(encoder, 'Latham', 'LTM', ['LTM']);
      expectEncoding(encoder, 'Lathrop', 'L0RP', ['LTRP']);
      expectEncoding(encoder, 'Lauter', 'LTR', ['LTR']);
      expectEncoding(encoder, 'Lawrence', 'LRNS', ['LRNS']);
      expectEncoding(encoder, 'Leach', 'LK', ['LK']);
      expectEncoding(encoder, 'Leager', 'LKR', ['LJR']);
      expectEncoding(encoder, 'Learned', 'LRNT', ['LRNT']);
      expectEncoding(encoder, 'Leavitt', 'LFT', ['LFT']);
      expectEncoding(encoder, 'Lee', 'L', ['L']);
      expectEncoding(encoder, 'Leete', 'LT', ['LT']);
      expectEncoding(encoder, 'Leggett', 'LKT', ['LKT']);
      expectEncoding(encoder, 'Leland', 'LLNT', ['LLNT']);
      expectEncoding(encoder, 'Leonard', 'LNRT', ['LNRT']);
      expectEncoding(encoder, 'Lester', 'LSTR', ['LSTR']);
      expectEncoding(encoder, 'Lestrange', 'LSTR', ['LSTR']);
      expectEncoding(encoder, 'Lethem', 'L0M', ['LTM']);
      expectEncoding(encoder, 'Levine', 'LFN', ['LFN']);
      expectEncoding(encoder, 'Lewes', 'LS', ['LS']);
      expectEncoding(encoder, 'Lewis', 'LS', ['LS']);
      expectEncoding(encoder, 'Lincoln', 'LNKL', ['LNKL']);
      expectEncoding(encoder, 'Lindsey', 'LNTS', ['LNTS']);
      expectEncoding(encoder, 'Linher', 'LNR', ['LNR']);
      expectEncoding(encoder, 'Lippet', 'LPT', ['LPT']);
      expectEncoding(encoder, 'Lippincott', 'LPNK', ['LPNK']);
      expectEncoding(encoder, 'Lockwood', 'LKT', ['LKT']);
      expectEncoding(encoder, 'Loines', 'LNS', ['LNS']);
      expectEncoding(encoder, 'Lombard', 'LMPR', ['LMPR']);
      expectEncoding(encoder, 'Long', 'LNK', ['LNK']);
      expectEncoding(encoder, 'Longespee', 'LNJS', ['LNKS']);
      expectEncoding(encoder, 'Look', 'LK', ['LK']);
      expectEncoding(encoder, 'Lounsberry', 'LNSP', ['LNSP']);
      expectEncoding(encoder, 'Lounsbury', 'LNSP', ['LNSP']);
      expectEncoding(encoder, 'Louthe', 'L0', ['LT']);
      expectEncoding(encoder, 'Loveyne', 'LFN', ['LFN']);
      expectEncoding(encoder, 'Lowe', 'L', ['L']);
      expectEncoding(encoder, 'Ludlam', 'LTLM', ['LTLM']);
      expectEncoding(encoder, 'Lumbard', 'LMPR', ['LMPR']);
      expectEncoding(encoder, 'Lund', 'LNT', ['LNT']);
      expectEncoding(encoder, 'Luno', 'LN', ['LN']);
      expectEncoding(encoder, 'Lutz', 'LTS', ['LTS']);
      expectEncoding(encoder, 'Lydia', 'LT', ['LT']);
      expectEncoding(encoder, 'Lynne', 'LN', ['LN']);
      expectEncoding(encoder, 'Lyon', 'LN', ['LN']);
      expectEncoding(encoder, 'laugh', 'LF', ['LF']);
    });

    test('test batch M', () {
      final encoder = DoubleMetaphone.defaultEncoder;
      expectEncoding(encoder, 'Macomber', 'MKMP', ['MKMP']);
      expectEncoding(encoder, 'Macy', 'MS', ['MS']);
      expectEncoding(encoder, 'Magnus', 'MNS', ['MKNS']);
      expectEncoding(encoder, 'Mahien', 'MHN', ['MHN']);
      expectEncoding(encoder, 'Malmains', 'MLMN', ['MLMN']);
      expectEncoding(encoder, 'Malory', 'MLR', ['MLR']);
      expectEncoding(encoder, 'Mancinelli', 'MNSN', ['MNSN']);
      expectEncoding(encoder, 'Mancini', 'MNSN', ['MNSN']);
      expectEncoding(encoder, 'Mann', 'MN', ['MN']);
      expectEncoding(encoder, 'Manning', 'MNNK', ['MNNK']);
      expectEncoding(encoder, 'Manter', 'MNTR', ['MNTR']);
      expectEncoding(encoder, 'Marion', 'MRN', ['MRN']);
      expectEncoding(encoder, 'Marley', 'MRL', ['MRL']);
      expectEncoding(encoder, 'Marmion', 'MRMN', ['MRMN']);
      expectEncoding(encoder, 'Marquart', 'MRKR', ['MRKR']);
      expectEncoding(encoder, 'Marsh', 'MRX', ['MRX']);
      expectEncoding(encoder, 'Marshal', 'MRXL', ['MRXL']);
      expectEncoding(encoder, 'Marshall', 'MRXL', ['MRXL']);
      expectEncoding(encoder, 'Martel', 'MRTL', ['MRTL']);
      expectEncoding(encoder, 'Martha', 'MR0', ['MRT']);
      expectEncoding(encoder, 'Martin', 'MRTN', ['MRTN']);
      expectEncoding(encoder, 'Marturano', 'MRTR', ['MRTR']);
      expectEncoding(encoder, 'Marvin', 'MRFN', ['MRFN']);
      expectEncoding(encoder, 'Mary', 'MR', ['MR']);
      expectEncoding(encoder, 'Mason', 'MSN', ['MSN']);
      expectEncoding(encoder, 'Maxwell', 'MKSL', ['MKSL']);
      expectEncoding(encoder, 'Mayhew', 'MH', ['MHF']);
      expectEncoding(encoder, 'Mead', 'MT', ['MT']);
      expectEncoding(encoder, 'Meade', 'MT', ['MT']);
      expectEncoding(encoder, 'Meck', 'MK', ['MK']);
      expectEncoding(encoder, 'Melton', 'MLTN', ['MLTN']);
      expectEncoding(encoder, 'Mendenhall', 'MNTN', ['MNTN']);
      expectEncoding(encoder, 'Mering', 'MRNK', ['MRNK']);
      expectEncoding(encoder, 'Merrick', 'MRK', ['MRK']);
      expectEncoding(encoder, 'Merry', 'MR', ['MR']);
      expectEncoding(encoder, 'Mighill', 'ML', ['ML']);
      expectEncoding(encoder, 'Miller', 'MLR', ['MLR']);
      expectEncoding(encoder, 'Milton', 'MLTN', ['MLTN']);
      expectEncoding(encoder, 'Mohun', 'MHN', ['MHN']);
      expectEncoding(encoder, 'Montague', 'MNTK', ['MNTK']);
      expectEncoding(encoder, 'Montboucher', 'MNTP', ['MNTP']);
      expectEncoding(encoder, 'Moore', 'MR', ['MR']);
      expectEncoding(encoder, 'Morrel', 'MRL', ['MRL']);
      expectEncoding(encoder, 'Morrill', 'MRL', ['MRL']);
      expectEncoding(encoder, 'Morris', 'MRS', ['MRS']);
      expectEncoding(encoder, 'Morton', 'MRTN', ['MRTN']);
      expectEncoding(encoder, 'Moton', 'MTN', ['MTN']);
      expectEncoding(encoder, 'Muir', 'MR', ['MR']);
      expectEncoding(encoder, 'Mulferd', 'MLFR', ['MLFR']);
      expectEncoding(encoder, 'Mullins', 'MLNS', ['MLNS']);
      expectEncoding(encoder, 'Mulso', 'MLS', ['MLS']);
      expectEncoding(encoder, 'Munger', 'MNKR', ['MNJR']);
      expectEncoding(encoder, 'Munt', 'MNT', ['MNT']);
      expectEncoding(encoder, 'Murchad', 'MRXT', ['MRKT']);
      expectEncoding(encoder, 'Murdock', 'MRTK', ['MRTK']);
      expectEncoding(encoder, 'Murray', 'MR', ['MR']);
      expectEncoding(encoder, 'Muskett', 'MSKT', ['MSKT']);
      expectEncoding(encoder, 'Myers', 'MRS', ['MRS']);
      expectEncoding(encoder, 'Myrick', 'MRK', ['MRK']);
      expectEncoding(encoder, 'manger', 'MNJR', ['MNKR']);
      expectEncoding(encoder, 'maurice', 'MRS', ['MRS']);
      expectEncoding(encoder, 'maisey', 'MS', ['MS']);
    });

    test('test batch N', () {
      final encoder = DoubleMetaphone.defaultEncoder;
      expectEncoding(encoder, 'NORRIS', 'NRS', ['NRS']);
      expectEncoding(encoder, 'Nayle', 'NL', ['NL']);
      expectEncoding(encoder, 'Newcomb', 'NKMP', ['NKMP']);
      expectEncoding(encoder, 'Newcomb(e)', 'NKMP', ['NKMP']);
      expectEncoding(encoder, 'Newkirk', 'NKRK', ['NKRK']);
      expectEncoding(encoder, 'Newton', 'NTN', ['NTN']);
      expectEncoding(encoder, 'Niles', 'NLS', ['NLS']);
      expectEncoding(encoder, 'Noble', 'NPL', ['NPL']);
      expectEncoding(encoder, 'Noel', 'NL', ['NL']);
      expectEncoding(encoder, 'Northend', 'NR0N', ['NRTN']);
      expectEncoding(encoder, 'Norton', 'NRTN', ['NRTN']);
      expectEncoding(encoder, 'Nutter', 'NTR', ['NTR']);
      expectEncoding(encoder, 'Nowhere', 'NR', ['NR']);
    });

    test('test batch O', () {
      final encoder = DoubleMetaphone.defaultEncoder;
      expectEncoding(encoder, 'Odding', 'ATNK', ['ATNK']);
      expectEncoding(encoder, 'Odenbaugh', 'ATNP', ['ATNP']);
      expectEncoding(encoder, 'Ogborn', 'AKPR', ['AKPR']);
      expectEncoding(encoder, 'Oppenheimer', 'APNM', ['APNM']);
      expectEncoding(encoder, 'Otis', 'ATS', ['ATS']);
      expectEncoding(encoder, 'Oviatt', 'AFT', ['AFT']);
      expectEncoding(encoder, 'ORCHEStra', 'ARKS', ['ARKS']);
      expectEncoding(encoder, 'ORCHID', 'ARKT', ['ARKT']);
      expectEncoding(encoder, 'otto', 'AT', ['AT']);
    });

    test('test batch P', () {
      final encoder = DoubleMetaphone.defaultEncoder;
      expectEncoding(encoder, 'PRUST?', 'PRST', ['PRST']);
      expectEncoding(encoder, 'Paddock', 'PTK', ['PTK']);
      expectEncoding(encoder, 'Page', 'PJ', ['PK']);
      expectEncoding(encoder, 'Paine', 'PN', ['PN']);
      expectEncoding(encoder, 'Paist', 'PST', ['PST']);
      expectEncoding(encoder, 'Palmer', 'PLMR', ['PLMR']);
      expectEncoding(encoder, 'Park', 'PRK', ['PRK']);
      expectEncoding(encoder, 'Parker', 'PRKR', ['PRKR']);
      expectEncoding(encoder, 'Parkhurst', 'PRKR', ['PRKR']);
      expectEncoding(encoder, 'Parrat', 'PRT', ['PRT']);
      expectEncoding(encoder, 'Parsons', 'PRSN', ['PRSN']);
      expectEncoding(encoder, 'Partridge', 'PRTR', ['PRTR']);
      expectEncoding(encoder, 'Pashley', 'PXL', ['PXL']);
      expectEncoding(encoder, 'Pasley', 'PSL', ['PSL']);
      expectEncoding(encoder, 'Patrick', 'PTRK', ['PTRK']);
      expectEncoding(encoder, 'Pattee', 'PT', ['PT']);
      expectEncoding(encoder, 'Patten', 'PTN', ['PTN']);
      expectEncoding(encoder, 'Pawley', 'PL', ['PL']);
      expectEncoding(encoder, 'Payne', 'PN', ['PN']);
      expectEncoding(encoder, 'Peabody', 'PPT', ['PPT']);
      expectEncoding(encoder, 'Peake', 'PK', ['PK']);
      expectEncoding(encoder, 'Pearson', 'PRSN', ['PRSN']);
      expectEncoding(encoder, 'Peat', 'PT', ['PT']);
      expectEncoding(encoder, 'Pedersen', 'PTRS', ['PTRS']);
      expectEncoding(encoder, 'Percy', 'PRS', ['PRS']);
      expectEncoding(encoder, 'Perkins', 'PRKN', ['PRKN']);
      expectEncoding(encoder, 'Perrine', 'PRN', ['PRN']);
      expectEncoding(encoder, 'Perry', 'PR', ['PR']);
      expectEncoding(encoder, 'Peson', 'PSN', ['PSN']);
      expectEncoding(encoder, 'Peterson', 'PTRS', ['PTRS']);
      expectEncoding(encoder, 'Peyton', 'PTN', ['PTN']);
      expectEncoding(encoder, 'Phinney', 'FN', ['FN']);
      expectEncoding(encoder, 'Pickard', 'PKRT', ['PKRT']);
      expectEncoding(encoder, 'Pierce', 'PRS', ['PRS']);
      expectEncoding(encoder, 'Pierrepont', 'PRPN', ['PRPN']);
      expectEncoding(encoder, 'Pike', 'PK', ['PK']);
      expectEncoding(encoder, 'Pinkham', 'PNKM', ['PNKM']);
      expectEncoding(encoder, 'Pitman', 'PTMN', ['PTMN']);
      expectEncoding(encoder, 'Pitt', 'PT', ['PT']);
      expectEncoding(encoder, 'Pitts', 'PTS', ['PTS']);
      expectEncoding(encoder, 'Plantagenet', 'PLNT', ['PLNT']);
      expectEncoding(encoder, 'Platt', 'PLT', ['PLT']);
      expectEncoding(encoder, 'Platts', 'PLTS', ['PLTS']);
      expectEncoding(encoder, 'Pleis', 'PLS', ['PLS']);
      expectEncoding(encoder, 'Pleiss', 'PLS', ['PLS']);
      expectEncoding(encoder, 'Plisko', 'PLSK', ['PLSK']);
      expectEncoding(encoder, 'Pliskovitch', 'PLSK', ['PLSK']);
      expectEncoding(encoder, 'Plum', 'PLM', ['PLM']);
      expectEncoding(encoder, 'Plume', 'PLM', ['PLM']);
      expectEncoding(encoder, 'Poitou', 'PT', ['PT']);
      expectEncoding(encoder, 'Pomeroy', 'PMR', ['PMR']);
      expectEncoding(encoder, 'Poretiers', 'PRTR', ['PRTR']);
      expectEncoding(encoder, 'Pote', 'PT', ['PT']);
      expectEncoding(encoder, 'Potter', 'PTR', ['PTR']);
      expectEncoding(encoder, 'Potts', 'PTS', ['PTS']);
      expectEncoding(encoder, 'Powell', 'PL', ['PL']);
      expectEncoding(encoder, 'Pratt', 'PRT', ['PRT']);
      expectEncoding(encoder, 'Presbury', 'PRSP', ['PRSP']);
      expectEncoding(encoder, 'Priest', 'PRST', ['PRST']);
      expectEncoding(encoder, 'Prindle', 'PRNT', ['PRNT']);
      expectEncoding(encoder, 'Prior', 'PRR', ['PRR']);
      expectEncoding(encoder, 'Profumo', 'PRFM', ['PRFM']);
      expectEncoding(encoder, 'Purdy', 'PRT', ['PRT']);
      expectEncoding(encoder, 'Purefoy', 'PRF', ['PRF']);
      expectEncoding(encoder, 'Pury', 'PR', ['PR']);
      expectEncoding(encoder, 'Pierce', 'PRS', ['PRS']);
      expectEncoding(encoder, 'pegnitz', 'PNTS', ['PKNT']);
      expectEncoding(encoder, 'piskowitz', 'PSKT', ['PSKF']);
      expectEncoding(encoder, 'Parachute', 'PRKT', ['PRKT']);
    });

    test('test batch Q', () {
      final encoder = DoubleMetaphone.defaultEncoder;
      expectEncoding(encoder, 'Quinter', 'KNTR', ['KNTR']);
      expectEncoding(encoder, 'queen', 'KN', ['KN']);
    });

    test('test batch R', () {
      final encoder = DoubleMetaphone.defaultEncoder;
      expectEncoding(encoder, 'Rachel', 'RXL', ['RKL']);
      expectEncoding(encoder, 'Rand', 'RNT', ['RNT']);
      expectEncoding(encoder, 'Rankin', 'RNKN', ['RNKN']);
      expectEncoding(encoder, 'Ravenscroft', 'RFNS', ['RFNS']);
      expectEncoding(encoder, 'Raynsford', 'RNSF', ['RNSF']);
      expectEncoding(encoder, 'Reakirt', 'RKRT', ['RKRT']);
      expectEncoding(encoder, 'Reaves', 'RFS', ['RFS']);
      expectEncoding(encoder, 'Reeves', 'RFS', ['RFS']);
      expectEncoding(encoder, 'Reichert', 'RXRT', ['RKRT']);
      expectEncoding(encoder, 'Remmele', 'RML', ['RML']);
      expectEncoding(encoder, 'Reynolds', 'RNLT', ['RNLT']);
      expectEncoding(encoder, 'Rhodes', 'RTS', ['RTS']);
      expectEncoding(encoder, 'Richard', 'RXRT', ['RKRT']);
      expectEncoding(encoder, 'Richards', 'RXRT', ['RKRT']);
      expectEncoding(encoder, 'Richardson', 'RXRT', ['RKRT']);
      expectEncoding(encoder, 'Ring', 'RNK', ['RNK']);
      expectEncoding(encoder, 'Roberts', 'RPRT', ['RPRT']);
      expectEncoding(encoder, 'Robertson', 'RPRT', ['RPRT']);
      expectEncoding(encoder, 'Robson', 'RPSN', ['RPSN']);
      expectEncoding(encoder, 'Rodie', 'RT', ['RT']);
      expectEncoding(encoder, 'Rody', 'RT', ['RT']);
      expectEncoding(encoder, 'Rogers', 'RKRS', ['RJRS']);
      expectEncoding(encoder, 'Ross', 'RS', ['RS']);
      expectEncoding(encoder, 'Rosslevin', 'RSLF', ['RSLF']);
      expectEncoding(encoder, 'Rowland', 'RLNT', ['RLNT']);
      expectEncoding(encoder, 'Ruehl', 'RL', ['RL']);
      expectEncoding(encoder, 'Russell', 'RSL', ['RSL']);
      expectEncoding(encoder, 'Ruth', 'R0', ['RT']);
      expectEncoding(encoder, 'Ryan', 'RN', ['RN']);
      expectEncoding(encoder, 'Rysse', 'RS', ['RS']);
      expectEncoding(encoder, 'ranger', 'RNJR', ['RNKR']);
      expectEncoding(encoder, 'raspberry', 'RSPR', ['RSPR']);
      expectEncoding(encoder, 'resnais', 'RSN', ['RSNS']);
      expectEncoding(encoder, 'rogier', 'RJ', ['RJR']);
      expectEncoding(encoder, 'rough', 'RF', ['RF']);
      expectEncoding(encoder, 'ray', 'R', ['R']);
      expectEncoding(encoder, 'Rapelje', 'RPL', ['RPL']);
      expectEncoding(encoder, 'richard', 'RXRT', ['RKRT']);
      expectEncoding(encoder, 'randy', 'RNT', ['RNT']);
    });

    test('test batch S', () {
      final encoder = DoubleMetaphone.defaultEncoder;
      expectEncoding(encoder, 'Sadler', 'STLR', ['STLR']);
      expectEncoding(encoder, 'Salmon', 'SLMN', ['SLMN']);
      expectEncoding(encoder, 'Salter', 'SLTR', ['SLTR']);
      expectEncoding(encoder, 'Salvatore', 'SLFT', ['SLFT']);
      expectEncoding(encoder, 'Sanders', 'SNTR', ['SNTR']);
      expectEncoding(encoder, 'Sands', 'SNTS', ['SNTS']);
      expectEncoding(encoder, 'Sanford', 'SNFR', ['SNFR']);
      expectEncoding(encoder, 'Sanger', 'SNKR', ['SNJR']);
      expectEncoding(encoder, 'Sargent', 'SRJN', ['SRKN']);
      expectEncoding(encoder, 'Saunders', 'SNTR', ['SNTR']);
      expectEncoding(encoder, 'Schilling', 'XLNK', ['XLNK']);
      expectEncoding(encoder, 'Schlegel', 'XLKL', ['SLKL']);
      expectEncoding(encoder, 'Scott', 'SKT', ['SKT']);
      expectEncoding(encoder, 'Sears', 'SRS', ['SRS']);
      expectEncoding(encoder, 'Segersall', 'SJRS', ['SKRS']);
      expectEncoding(encoder, 'Senecal', 'SNKL', ['SNKL']);
      expectEncoding(encoder, 'Sergeaux', 'SRJ', ['SRK']);
      expectEncoding(encoder, 'Severance', 'SFRN', ['SFRN']);
      expectEncoding(encoder, 'Sharp', 'XRP', ['XRP']);
      expectEncoding(encoder, 'Sharpe', 'XRP', ['XRP']);
      expectEncoding(encoder, 'Sharply', 'XRPL', ['XRPL']);
      expectEncoding(encoder, 'Shatswell', 'XTSL', ['XTSL']);
      expectEncoding(encoder, 'Shattack', 'XTK', ['XTK']);
      expectEncoding(encoder, 'Shattock', 'XTK', ['XTK']);
      expectEncoding(encoder, 'Shattuck', 'XTK', ['XTK']);
      expectEncoding(encoder, 'Shaw', 'X', ['XF']);
      expectEncoding(encoder, 'Sheldon', 'XLTN', ['XLTN']);
      expectEncoding(encoder, 'Sherman', 'XRMN', ['XRMN']);
      expectEncoding(encoder, 'Shinn', 'XN', ['XN']);
      expectEncoding(encoder, 'Shirford', 'XRFR', ['XRFR']);
      expectEncoding(encoder, 'Shirley', 'XRL', ['XRL']);
      expectEncoding(encoder, 'Shively', 'XFL', ['XFL']);
      expectEncoding(encoder, 'Shoemaker', 'XMKR', ['XMKR']);
      expectEncoding(encoder, 'Short', 'XRT', ['XRT']);
      expectEncoding(encoder, 'Shotwell', 'XTL', ['XTL']);
      expectEncoding(encoder, 'Shute', 'XT', ['XT']);
      expectEncoding(encoder, 'Sibley', 'SPL', ['SPL']);
      expectEncoding(encoder, 'Silver', 'SLFR', ['SLFR']);
      expectEncoding(encoder, 'Simes', 'SMS', ['SMS']);
      expectEncoding(encoder, 'Sinken', 'SNKN', ['SNKN']);
      expectEncoding(encoder, 'Sinn', 'SN', ['SN']);
      expectEncoding(encoder, 'Skelton', 'SKLT', ['SKLT']);
      expectEncoding(encoder, 'Skiffe', 'SKF', ['SKF']);
      expectEncoding(encoder, 'Skotkonung', 'SKTK', ['SKTK']);
      expectEncoding(encoder, 'Slade', 'SLT', ['XLT']);
      expectEncoding(encoder, 'Slye', 'SL', ['XL']);
      expectEncoding(encoder, 'Smedley', 'SMTL', ['XMTL']);
      expectEncoding(encoder, 'Smith', 'SM0', ['XMT']);
      expectEncoding(encoder, 'Smythe', 'SM0', ['XMT']);
      expectEncoding(encoder, 'Snow', 'SN', ['XNF']);
      expectEncoding(encoder, 'Soole', 'SL', ['SL']);
      expectEncoding(encoder, 'Soule', 'SL', ['SL']);
      expectEncoding(encoder, 'Southworth', 'S0R0', ['STRT']);
      expectEncoding(encoder, 'Sowles', 'SLS', ['SLS']);
      expectEncoding(encoder, 'Spalding', 'SPLT', ['SPLT']);
      expectEncoding(encoder, 'Spark', 'SPRK', ['SPRK']);
      expectEncoding(encoder, 'Spencer', 'SPNS', ['SPNS']);
      expectEncoding(encoder, 'Sperry', 'SPR', ['SPR']);
      expectEncoding(encoder, 'Spofford', 'SPFR', ['SPFR']);
      expectEncoding(encoder, 'Spooner', 'SPNR', ['SPNR']);
      expectEncoding(encoder, 'Sprague', 'SPRK', ['SPRK']);
      expectEncoding(encoder, 'Springer', 'SPRN', ['SPRN']);
      expectEncoding(encoder, 'Stafferton', 'STFR', ['STFR']);
      expectEncoding(encoder, 'Stafford', 'STFR', ['STFR']);
      expectEncoding(encoder, 'Stalham', 'STLM', ['STLM']);
      expectEncoding(encoder, 'Stanford', 'STNF', ['STNF']);
      expectEncoding(encoder, 'Stanton', 'STNT', ['STNT']);
      expectEncoding(encoder, 'Star', 'STR', ['STR']);
      expectEncoding(encoder, 'Starbuck', 'STRP', ['STRP']);
      expectEncoding(encoder, 'Starkey', 'STRK', ['STRK']);
      expectEncoding(encoder, 'Starkweather', 'STRK', ['STRK']);
      expectEncoding(encoder, 'Stearns', 'STRN', ['STRN']);
      expectEncoding(encoder, 'Stebbins', 'STPN', ['STPN']);
      expectEncoding(encoder, 'Steele', 'STL', ['STL']);
      expectEncoding(encoder, 'Stephen', 'STFN', ['STFN']);
      expectEncoding(encoder, 'Stephenson', 'STFN', ['STFN']);
      expectEncoding(encoder, 'Stevens', 'STFN', ['STFN']);
      expectEncoding(encoder, 'Stoddard', 'STTR', ['STTR']);
      expectEncoding(encoder, 'Stodder', 'STTR', ['STTR']);
      expectEncoding(encoder, 'Stone', 'STN', ['STN']);
      expectEncoding(encoder, 'Storey', 'STR', ['STR']);
      expectEncoding(encoder, 'Storrada', 'STRT', ['STRT']);
      expectEncoding(encoder, 'Story', 'STR', ['STR']);
      expectEncoding(encoder, 'Stoughton', 'STFT', ['STFT']);
      expectEncoding(encoder, 'Stout', 'STT', ['STT']);
      expectEncoding(encoder, 'Stow', 'ST', ['STF']);
      expectEncoding(encoder, 'Strong', 'STRN', ['STRN']);
      expectEncoding(encoder, 'Strutt', 'STRT', ['STRT']);
      expectEncoding(encoder, 'Stryker', 'STRK', ['STRK']);
      expectEncoding(encoder, 'Stuckeley', 'STKL', ['STKL']);
      expectEncoding(encoder, 'Sturges', 'STRJ', ['STRK']);
      expectEncoding(encoder, 'Sturgess', 'STRJ', ['STRK']);
      expectEncoding(encoder, 'Sturgis', 'STRJ', ['STRK']);
      expectEncoding(encoder, 'Suevain', 'SFN', ['SFN']);
      expectEncoding(encoder, 'Sulyard', 'SLRT', ['SLRT']);
      expectEncoding(encoder, 'Sutton', 'STN', ['STN']);
      expectEncoding(encoder, 'Swain', 'SN', ['XN']);
      expectEncoding(encoder, 'Swayne', 'SN', ['XN']);
      expectEncoding(encoder, 'Swayze', 'SS', ['XTS']);
      expectEncoding(encoder, 'Swift', 'SFT', ['XFT']);
      expectEncoding(encoder, 'Schlesinger', 'XLSN', ['SLSN']);
      expectEncoding(encoder, 'schenker', 'XNKR', ['SKNK']);
      expectEncoding(encoder, 'schermerhorn', 'XRMR', ['SKRM']);
      expectEncoding(encoder, 'schmidt', 'XMT', ['SMT']);
      expectEncoding(encoder, 'schneider', 'XNTR', ['SNTR']);
      expectEncoding(encoder, 'school', 'SKL', ['SKL']);
      expectEncoding(encoder, 'schooner', 'SKNR', ['SKNR']);
      expectEncoding(encoder, 'schrozberg', 'XRSP', ['SRSP']);
      expectEncoding(encoder, 'schulman', 'XLMN', ['XLMN']);
      expectEncoding(encoder, 'schwabach', 'XPK', ['XFPK']);
      expectEncoding(encoder, 'schwarzach', 'XRSK', ['XFRT']);
      expectEncoding(encoder, 'smith', 'SM0', ['XMT']);
      expectEncoding(encoder, 'snider', 'SNTR', ['XNTR']);
      expectEncoding(encoder, 'succeed', 'SKST', ['SKST']);
      expectEncoding(encoder, 'sugarcane', 'XKRK', ['SKRK']);
      expectEncoding(encoder, 'svobodka', 'SFPT', ['SFPT']);
      expectEncoding(encoder, 'solilijs', 'SLLS', ['SLLS']);
      expectEncoding(encoder, 'Schwein', 'XN', ['XFN']);
      expectEncoding(encoder, 'steven', 'STFN', ['STFN']);
    });

    test('test batch T', () {
      final encoder = DoubleMetaphone.defaultEncoder;
      expectEncoding(encoder, 'Taber', 'TPR', ['TPR']);
      expectEncoding(encoder, 'Talcott', 'TLKT', ['TLKT']);
      expectEncoding(encoder, 'Tarne', 'TRN', ['TRN']);
      expectEncoding(encoder, 'Tatum', 'TTM', ['TTM']);
      expectEncoding(encoder, 'Taverner', 'TFRN', ['TFRN']);
      expectEncoding(encoder, 'Taylor', 'TLR', ['TLR']);
      expectEncoding(encoder, 'Tenney', 'TN', ['TN']);
      expectEncoding(encoder, 'Thayer', '0R', ['TR']);
      expectEncoding(encoder, 'Thember', '0MPR', ['TMPR']);
      expectEncoding(encoder, 'Thomas', 'TMS', ['TMS']);
      expectEncoding(encoder, 'Thompson', 'TMPS', ['TMPS']);
      expectEncoding(encoder, 'Thorne', '0RN', ['TRN']);
      expectEncoding(encoder, 'Thornycraft', '0RNK', ['TRNK']);
      expectEncoding(encoder, 'Threlkeld', '0RLK', ['TRLK']);
      expectEncoding(encoder, 'Throckmorton', '0RKM', ['TRKM']);
      expectEncoding(encoder, 'Thwaits', '0TS', ['TTS']);
      expectEncoding(encoder, 'Tibbetts', 'TPTS', ['TPTS']);
      expectEncoding(encoder, 'Tidd', 'TT', ['TT']);
      expectEncoding(encoder, 'Tierney', 'TRN', ['TRN']);
      expectEncoding(encoder, 'Tilley', 'TL', ['TL']);
      expectEncoding(encoder, 'Tillieres', 'TLRS', ['TLRS']);
      expectEncoding(encoder, 'Tilly', 'TL', ['TL']);
      expectEncoding(encoder, 'Tisdale', 'TSTL', ['TSTL']);
      expectEncoding(encoder, 'Titus', 'TTS', ['TTS']);
      expectEncoding(encoder, 'Tobey', 'TP', ['TP']);
      expectEncoding(encoder, 'Tooker', 'TKR', ['TKR']);
      expectEncoding(encoder, 'Towle', 'TL', ['TL']);
      expectEncoding(encoder, 'Towne', 'TN', ['TN']);
      expectEncoding(encoder, 'Townsend', 'TNSN', ['TNSN']);
      expectEncoding(encoder, 'Treadway', 'TRT', ['TRT']);
      expectEncoding(encoder, 'Trelawney', 'TRLN', ['TRLN']);
      expectEncoding(encoder, 'Trinder', 'TRNT', ['TRNT']);
      expectEncoding(encoder, 'Tripp', 'TRP', ['TRP']);
      expectEncoding(encoder, 'Trippe', 'TRP', ['TRP']);
      expectEncoding(encoder, 'Trott', 'TRT', ['TRT']);
      expectEncoding(encoder, 'True', 'TR', ['TR']);
      expectEncoding(encoder, 'Trussebut', 'TRSP', ['TRSP']);
      expectEncoding(encoder, 'Tucker', 'TKR', ['TKR']);
      expectEncoding(encoder, 'Turgeon', 'TRJN', ['TRKN']);
      expectEncoding(encoder, 'Turner', 'TRNR', ['TRNR']);
      expectEncoding(encoder, 'Tuttle', 'TTL', ['TTL']);
      expectEncoding(encoder, 'Tyler', 'TLR', ['TLR']);
      expectEncoding(encoder, 'Tylle', 'TL', ['TL']);
      expectEncoding(encoder, 'Tyrrel', 'TRL', ['TRL']);
      expectEncoding(encoder, 'tagliaro', 'TKLR', ['TLR']);
      expectEncoding(encoder, 'thames', 'TMS', ['TMS']);
      expectEncoding(encoder, 'theilheim', '0LM', ['TLM']);
      expectEncoding(encoder, 'thomas', 'TMS', ['TMS']);
      expectEncoding(encoder, 'thumb', '0M', ['TM']);
      expectEncoding(encoder, 'tichner', 'TXNR', ['TKNR']);
      expectEncoding(encoder, 'tough', 'TF', ['TF']);
      expectEncoding(encoder, 'Through', '0R', ['TR']);
      expectEncoding(encoder, 'Thumbail', '0MPL', ['TMPL']);
      expectEncoding(encoder, 'Tux', 'TKS', ['TKS']);
    });

    test('test batch U', () {
      final encoder = DoubleMetaphone.defaultEncoder;
      expectEncoding(encoder, 'Ulrich', 'ALRX', ['ALRK']);
      expectEncoding(encoder, 'Underhill', 'ANTR', ['ANTR']);
      expectEncoding(encoder, 'Underwood', 'ANTR', ['ANTR']);
      expectEncoding(encoder, 'Unknown', 'ANKN', ['ANKN']);
      expectEncoding(encoder, 'unknown', 'ANKN', ['ANKN']);
      expectEncoding(encoder, 'Uomo', 'AM', ['AM']);
      expectEncoding(encoder, 'umbrella', 'AMPR', ['AMPR']);
    });

    test('test batch V', () {
      final encoder = DoubleMetaphone.defaultEncoder;
      expectEncoding(encoder, 'Valentine', 'FLNT', ['FLNT']);
      expectEncoding(encoder, 'Vaughan', 'FKN', ['FKN']);
      expectEncoding(encoder, 'Vermenlen', 'FRMN', ['FRMN']);
      expectEncoding(encoder, 'Vincent', 'FNSN', ['FNSN']);
      expectEncoding(encoder, 'Volentine', 'FLNT', ['FLNT']);
      expectEncoding(encoder, 'Vasserman', 'FSRM', ['FSRM']);
      expectEncoding(encoder, 'vilshofen', 'FLXF', ['FLXF']);
    });

    test('test batch W', () {
      final encoder = DoubleMetaphone.defaultEncoder;
      expectEncoding(encoder, 'Wagner', 'AKNR', ['FKNR']);
      expectEncoding(encoder, 'Waite', 'AT', ['FT']);
      expectEncoding(encoder, 'Walker', 'ALKR', ['FLKR']);
      expectEncoding(encoder, 'Walter', 'ALTR', ['FLTR']);
      expectEncoding(encoder, 'Wandell', 'ANTL', ['FNTL']);
      expectEncoding(encoder, 'Wandesford', 'ANTS', ['FNTS']);
      expectEncoding(encoder, 'Warbleton', 'ARPL', ['FRPL']);
      expectEncoding(encoder, 'Ward', 'ART', ['FRT']);
      expectEncoding(encoder, 'Warde', 'ART', ['FRT']);
      expectEncoding(encoder, 'Ware', 'AR', ['FR']);
      expectEncoding(encoder, 'Wareham', 'ARHM', ['FRHM']);
      expectEncoding(encoder, 'Warner', 'ARNR', ['FRNR']);
      expectEncoding(encoder, 'Warren', 'ARN', ['FRN']);
      expectEncoding(encoder, 'Washburne', 'AXPR', ['FXPR']);
      expectEncoding(encoder, 'Waterbury', 'ATRP', ['FTRP']);
      expectEncoding(encoder, 'Watson', 'ATSN', ['FTSN']);
      expectEncoding(encoder, 'WatsonEllithorpe', 'ATSN', ['FTSN']);
      expectEncoding(encoder, 'Watts', 'ATS', ['FTS']);
      expectEncoding(encoder, 'Wayne', 'AN', ['FN']);
      expectEncoding(encoder, 'Webb', 'AP', ['FP']);
      expectEncoding(encoder, 'Weber', 'APR', ['FPR']);
      expectEncoding(encoder, 'Webster', 'APST', ['FPST']);
      expectEncoding(encoder, 'Weed', 'AT', ['FT']);
      expectEncoding(encoder, 'Weeks', 'AKS', ['FKS']);
      expectEncoding(encoder, 'Wells', 'ALS', ['FLS']);
      expectEncoding(encoder, 'Wenzell', 'ANSL', ['FNTS']);
      expectEncoding(encoder, 'West', 'AST', ['FST']);
      expectEncoding(encoder, 'Westbury', 'ASTP', ['FSTP']);
      expectEncoding(encoder, 'Whatlocke', 'ATLK', ['ATLK']);
      expectEncoding(encoder, 'Wheeler', 'ALR', ['ALR']);
      expectEncoding(encoder, 'Whiston', 'ASTN', ['ASTN']);
      expectEncoding(encoder, 'White', 'AT', ['AT']);
      expectEncoding(encoder, 'Whitman', 'ATMN', ['ATMN']);
      expectEncoding(encoder, 'Whiton', 'ATN', ['ATN']);
      expectEncoding(encoder, 'Whitson', 'ATSN', ['ATSN']);
      expectEncoding(encoder, 'Wickes', 'AKS', ['FKS']);
      expectEncoding(encoder, 'Wilbur', 'ALPR', ['FLPR']);
      expectEncoding(encoder, 'Wilcotes', 'ALKT', ['FLKT']);
      expectEncoding(encoder, 'Wilkinson', 'ALKN', ['FLKN']);
      expectEncoding(encoder, 'Willets', 'ALTS', ['FLTS']);
      expectEncoding(encoder, 'Willett', 'ALT', ['FLT']);
      expectEncoding(encoder, 'Willey', 'AL', ['FL']);
      expectEncoding(encoder, 'Williams', 'ALMS', ['FLMS']);
      expectEncoding(encoder, 'Williston', 'ALST', ['FLST']);
      expectEncoding(encoder, 'Wilson', 'ALSN', ['FLSN']);
      expectEncoding(encoder, 'Wimes', 'AMS', ['FMS']);
      expectEncoding(encoder, 'Winch', 'ANX', ['FNK']);
      expectEncoding(encoder, 'Winegar', 'ANKR', ['FNKR']);
      expectEncoding(encoder, 'Wing', 'ANK', ['FNK']);
      expectEncoding(encoder, 'Winsley', 'ANSL', ['FNSL']);
      expectEncoding(encoder, 'Winslow', 'ANSL', ['FNSL']);
      expectEncoding(encoder, 'Winthrop', 'AN0R', ['FNTR']);
      expectEncoding(encoder, 'Wise', 'AS', ['FS']);
      expectEncoding(encoder, 'Wood', 'AT', ['FT']);
      expectEncoding(encoder, 'Woodbridge', 'ATPR', ['FTPR']);
      expectEncoding(encoder, 'Woodward', 'ATRT', ['FTRT']);
      expectEncoding(encoder, 'Wooley', 'AL', ['FL']);
      expectEncoding(encoder, 'Woolley', 'AL', ['FL']);
      expectEncoding(encoder, 'Worth', 'AR0', ['FRT']);
      expectEncoding(encoder, 'Worthen', 'AR0N', ['FRTN']);
      expectEncoding(encoder, 'Worthley', 'AR0L', ['FRTL']);
      expectEncoding(encoder, 'Wright', 'RT', ['RT']);
      expectEncoding(encoder, 'Wyer', 'AR', ['FR']);
      expectEncoding(encoder, 'Wyere', 'AR', ['FR']);
      expectEncoding(encoder, 'Wynkoop', 'ANKP', ['FNKP']);
      expectEncoding(encoder, 'Wasserman', 'ASRM', ['FSRM']);
      expectEncoding(encoder, 'Womo', 'AM', ['FM']);
      expectEncoding(encoder, 'wachtler', 'AKTL', ['FKTL']);
      expectEncoding(encoder, 'wechsler', 'AKSL', ['FKSL']);
      expectEncoding(encoder, 'weikersheim', 'AKRS', ['FKRS']);
    });

    test('test batch X', () {
      final encoder = DoubleMetaphone.defaultEncoder;
      expectEncoding(encoder, 'xenophobia', 'SNFP', ['SNFP']);
    });

    test('test batch Y', () {
      final encoder = DoubleMetaphone.defaultEncoder;
      expectEncoding(encoder, 'Yarnall', 'ARNL', ['ARNL']);
      expectEncoding(encoder, 'Yeoman', 'AMN', ['AMN']);
      expectEncoding(encoder, 'Yorke', 'ARK', ['ARK']);
      expectEncoding(encoder, 'Young', 'ANK', ['ANK']);
      expectEncoding(encoder, 'Yankelovich', 'ANKL', ['ANKL']);
    });

    test('test batch Z', () {
      final encoder = DoubleMetaphone.defaultEncoder;
      expectEncoding(encoder, 'zhao', 'J', ['J']);
      expectEncoding(encoder, 'zhang', 'JNK', ['JNK']);
    });
  });

  group('Special Prefixes', () {
    test('test A prefixes', () {
      final encoder = DoubleMetaphone.defaultEncoder;
      expectEncoding(encoder, 'ab Wennonwen', 'APNN', ['APNN']);
      expectEncoding(encoder, 'ap Llewellyn', 'APLL', ['APLL']);
      expectEncoding(encoder, 'ap Lorwerth', 'APLR', ['APLR']);
    });

    test('test D prefixes', () {
      final encoder = DoubleMetaphone.defaultEncoder;
      expectEncoding(encoder, "D'Aubigny", 'TPN', ['TPKN']);
      expectEncoding(encoder, "d'Angouleme", 'TNKL', ['TNKL']);
      expectEncoding(encoder, 'de Audeham', 'TTHM', ['TTHM']);
      expectEncoding(encoder, 'de Bavant', 'TPFN', ['TPFN']);
      expectEncoding(encoder, 'de Beauchamp', 'TPXM', ['TPKM']);
      expectEncoding(encoder, 'de Beaumont', 'TPMN', ['TPMN']);
      expectEncoding(encoder, 'de Bolbec', 'TPLP', ['TPLP']);
      expectEncoding(encoder, 'de Braiose', 'TPRS', ['TPRS']);
      expectEncoding(encoder, 'de Braose', 'TPRS', ['TPRS']);
      expectEncoding(encoder, 'de Briwere', 'TPRR', ['TPRR']);
      expectEncoding(encoder, 'de Cantelou', 'TKNT', ['TKNT']);
      expectEncoding(encoder, 'de Cherelton', 'TXRL', ['TKRL']);
      expectEncoding(encoder, 'de Cherleton', 'TXRL', ['TKRL']);
      expectEncoding(encoder, 'de Clare', 'TKLR', ['TKLR']);
      expectEncoding(encoder, 'de Claremont', 'TKLR', ['TKLR']);
      expectEncoding(encoder, 'de Clifford', 'TKLF', ['TKLF']);
      expectEncoding(encoder, 'de Colville', 'TKLF', ['TKLF']);
      expectEncoding(encoder, 'de Courtenay', 'TKRT', ['TKRT']);
      expectEncoding(encoder, 'de Fauconberg', 'TFKN', ['TFKN']);
      expectEncoding(encoder, 'de Forest', 'TFRS', ['TFRS']);
      expectEncoding(encoder, 'de Gai', 'TK', ['TK']);
      expectEncoding(encoder, 'de Grey', 'TKR', ['TKR']);
      expectEncoding(encoder, 'de Guernons', 'TKRN', ['TKRN']);
      expectEncoding(encoder, 'de Haia', 'T', ['T']);
      expectEncoding(encoder, 'de Harcourt', 'TRKR', ['TRKR']);
      expectEncoding(encoder, 'de Hastings', 'TSTN', ['TSTN']);
      expectEncoding(encoder, 'de Hoke', 'TK', ['TK']);
      expectEncoding(encoder, 'de Hooch', 'TK', ['TK']);
      expectEncoding(encoder, 'de Hugelville', 'TJLF', ['TKLF']);
      expectEncoding(encoder, 'de Huntingdon', 'TNTN', ['TNTN']);
      expectEncoding(encoder, 'de Insula', 'TNSL', ['TNSL']);
      expectEncoding(encoder, 'de Keynes', 'TKNS', ['TKNS']);
      expectEncoding(encoder, 'de Lacy', 'TLS', ['TLS']);
      expectEncoding(encoder, 'de Lexington', 'TLKS', ['TLKS']);
      expectEncoding(encoder, 'de Lusignan', 'TLSN', ['TLSK']);
      expectEncoding(encoder, 'de Manvers', 'TMNF', ['TMNF']);
      expectEncoding(encoder, 'de Montagu', 'TMNT', ['TMNT']);
      expectEncoding(encoder, 'de Montault', 'TMNT', ['TMNT']);
      expectEncoding(encoder, 'de Montfort', 'TMNT', ['TMNT']);
      expectEncoding(encoder, 'de Mortimer', 'TMRT', ['TMRT']);
      expectEncoding(encoder, 'de Morville', 'TMRF', ['TMRF']);
      expectEncoding(encoder, 'de Morvois', 'TMRF', ['TMRF']);
      expectEncoding(encoder, 'de Neufmarche', 'TNFM', ['TNFM']);
      expectEncoding(encoder, 'de Odingsells', 'TTNK', ['TTNK']);
      expectEncoding(encoder, 'de Odyngsells', 'TTNK', ['TTNK']);
      expectEncoding(encoder, 'de Percy', 'TPRS', ['TPRS']);
      expectEncoding(encoder, 'de Pierrepont', 'TPRP', ['TPRP']);
      expectEncoding(encoder, 'de Plessetis', 'TPLS', ['TPLS']);
      expectEncoding(encoder, 'de Porhoet', 'TPRT', ['TPRT']);
      expectEncoding(encoder, 'de Prouz', 'TPRS', ['TPRS']);
      expectEncoding(encoder, 'de Quincy', 'TKNS', ['TKNS']);
      expectEncoding(encoder, 'de Ripellis', 'TRPL', ['TRPL']);
      expectEncoding(encoder, 'de Ros', 'TRS', ['TRS']);
      expectEncoding(encoder, 'de Salisbury', 'TSLS', ['TSLS']);
      expectEncoding(encoder, 'de Sanford', 'TSNF', ['TSNF']);
      expectEncoding(encoder, 'de Somery', 'TSMR', ['TSMR']);
      expectEncoding(encoder, 'de St. Hilary', 'TSTL', ['TSTL']);
      expectEncoding(encoder, 'de St. Liz', 'TSTL', ['TSTL']);
      expectEncoding(encoder, 'de Sutton', 'TSTN', ['TSTN']);
      expectEncoding(encoder, 'de Toeni', 'TTN', ['TTN']);
      expectEncoding(encoder, 'de Tony', 'TTN', ['TTN']);
      expectEncoding(encoder, 'de Umfreville', 'TMFR', ['TMFR']);
      expectEncoding(encoder, 'de Valognes', 'TFLN', ['TFLK']);
      expectEncoding(encoder, 'de Vaux', 'TF', ['TF']);
      expectEncoding(encoder, 'de Vere', 'TFR', ['TFR']);
      expectEncoding(encoder, 'de Vermandois', 'TFRM', ['TFRM']);
      expectEncoding(encoder, 'de Vernon', 'TFRN', ['TFRN']);
      expectEncoding(encoder, 'de Vexin', 'TFKS', ['TFKS']);
      expectEncoding(encoder, 'de Vitre', 'TFTR', ['TFTR']);
      expectEncoding(encoder, 'de Wandesford', 'TNTS', ['TNTS']);
      expectEncoding(encoder, 'de Warenne', 'TRN', ['TRN']);
      expectEncoding(encoder, 'de Westbury', 'TSTP', ['TSTP']);
      expectEncoding(encoder, 'di Saluzzo', 'TSLS', ['TSLT']);
    });

    test('test F prefixes', () {
      final encoder = DoubleMetaphone.defaultEncoder;
      expectEncoding(encoder, 'fitz Alan', 'FTSL', ['FTSL']);
      expectEncoding(encoder, 'fitz Geoffrey', 'FTSJ', ['FTSK']);
      expectEncoding(encoder, 'fitz Herbert', 'FTSR', ['FTSR']);
      expectEncoding(encoder, 'fitz John', 'FTSJ', ['FTSJ']);
      expectEncoding(encoder, 'fitz Patrick', 'FTSP', ['FTSP']);
      expectEncoding(encoder, 'fitz Payn', 'FTSP', ['FTSP']);
      expectEncoding(encoder, 'fitz Piers', 'FTSP', ['FTSP']);
      expectEncoding(encoder, 'fitz Randolph', 'FTSR', ['FTSR']);
      expectEncoding(encoder, 'fitz Richard', 'FTSR', ['FTSR']);
      expectEncoding(encoder, 'fitz Robert', 'FTSR', ['FTSR']);
      expectEncoding(encoder, 'fitz Roy', 'FTSR', ['FTSR']);
      expectEncoding(encoder, 'fitz Scrob', 'FTSS', ['FTSS']);
      expectEncoding(encoder, 'fitz Walter', 'FTSL', ['FTSL']);
      expectEncoding(encoder, 'fitz Warin', 'FTSR', ['FTSR']);
      expectEncoding(encoder, 'fitz Williams', 'FTSL', ['FTSL']);
    });

    test('test L prefixes', () {
      final encoder = DoubleMetaphone.defaultEncoder;
      expectEncoding(encoder, 'La Pointe', 'LPNT', ['LPNT']);
      expectEncoding(encoder, 'LaPlante', 'LPLN', ['LPLN']);
      expectEncoding(encoder, 'la Zouche', 'LSX', ['LSK']);
      expectEncoding(encoder, 'le Botiller', 'LPTL', ['LPTL']);
      expectEncoding(encoder, 'le Despenser', 'LTSP', ['LTSP']);
      expectEncoding(encoder, 'le deSpencer', 'LTSP', ['LTSP']);
    });

    test('test M prefixes', () {
      final encoder = DoubleMetaphone.defaultEncoder;
      expectEncoding(encoder, 'MacCafferey', 'MKFR', ['MKFR']);
      expectEncoding(encoder, 'mac caffrey', 'MKFR', ['MKFR']);
      expectEncoding(encoder, 'mac gregor', 'MKRK', ['MKRK']);
      expectEncoding(encoder, 'MacAlpin', 'MKLP', ['MKLP']);
      expectEncoding(encoder, 'MacBricc', 'MKPR', ['MKPR']);
      expectEncoding(encoder, 'MacCrinan', 'MKRN', ['MKRN']);
      expectEncoding(encoder, 'MacKenneth', 'MKN0', ['MKNT']);
      expectEncoding(encoder, 'MacMael nam Bo', 'MKML', ['MKML']);
      expectEncoding(encoder, 'MacMurchada', 'MKMR', ['MKMR']);
      expectEncoding(encoder, 'McClellan', 'MKLL', ['MKLL']);
      expectEncoding(encoder, 'McHugh', 'MK', ['MK']);
      expectEncoding(encoder, 'McLaughlin', 'MKLF', ['MKLF']);
      expectEncoding(encoder, 'McAllaster', 'MKLS', ['MKLS']);
      expectEncoding(encoder, 'McAllister', 'MKLS', ['MKLS']);
      expectEncoding(encoder, 'McConnell', 'MKNL', ['MKNL']);
      expectEncoding(encoder, 'McFarland', 'MKFR', ['MKFR']);
      expectEncoding(encoder, 'McIlroy', 'MSLR', ['MSLR']);
      expectEncoding(encoder, 'McNair', 'MKNR', ['MKNR']);
      expectEncoding(encoder, 'McNair-Landry', 'MKNR', ['MKNR']);
      expectEncoding(encoder, 'McRaven', 'MKRF', ['MKRF']);
      expectEncoding(encoder, 'McClelland', 'MKLL', ['MKLL']);
    });

    test('test OF prefixes', () {
      final encoder = DoubleMetaphone.defaultEncoder;
      expectEncoding(encoder, 'of Allendale', 'AFLN', ['AFLN']);
      expectEncoding(encoder, 'of Angouleme', 'AFNK', ['AFNK']);
      expectEncoding(encoder, 'of Anjou', 'AFNJ', ['AFNJ']);
      expectEncoding(encoder, 'of Aquitaine', 'AFKT', ['AFKT']);
      expectEncoding(encoder, 'of Aumale', 'AFML', ['AFML']);
      expectEncoding(encoder, 'of Bavaria', 'AFPF', ['AFPF']);
      expectEncoding(encoder, 'of Boulogne', 'AFPL', ['AFPL']);
      expectEncoding(encoder, 'of Brittany', 'AFPR', ['AFPR']);
      expectEncoding(encoder, 'of Brittary', 'AFPR', ['AFPR']);
      expectEncoding(encoder, 'of Castile', 'AFKS', ['AFKS']);
      expectEncoding(encoder, 'of Chester', 'AFXS', ['AFKS']);
      expectEncoding(encoder, 'of Clermont', 'AFKL', ['AFKL']);
      expectEncoding(encoder, 'of Cologne', 'AFKL', ['AFKL']);
      expectEncoding(encoder, 'of Dinan', 'AFTN', ['AFTN']);
      expectEncoding(encoder, 'of Dunbar', 'AFTN', ['AFTN']);
      expectEncoding(encoder, 'of England', 'AFNK', ['AFNK']);
      expectEncoding(encoder, 'of Essex', 'AFSK', ['AFSK']);
      expectEncoding(encoder, 'of Falaise', 'AFFL', ['AFFL']);
      expectEncoding(encoder, 'of Flanders', 'AFFL', ['AFFL']);
      expectEncoding(encoder, 'of Galloway', 'AFKL', ['AFKL']);
      expectEncoding(encoder, 'of Germany', 'AFKR', ['AFJR']);
      expectEncoding(encoder, 'of Gloucester', 'AFKL', ['AFKL']);
      expectEncoding(encoder, 'of Kiev', 'AFKF', ['AFKF']);
      expectEncoding(encoder, 'of Kuno', 'AFKN', ['AFKN']);
      expectEncoding(encoder, 'of Landen', 'AFLN', ['AFLN']);
      expectEncoding(encoder, 'of Laon', 'AFLN', ['AFLN']);
      expectEncoding(encoder, 'of Leinster', 'AFLN', ['AFLN']);
      expectEncoding(encoder, 'of Lens', 'AFLN', ['AFLN']);
      expectEncoding(encoder, 'of Lorraine', 'AFLR', ['AFLR']);
      expectEncoding(encoder, 'of Louvain', 'AFLF', ['AFLF']);
      expectEncoding(encoder, 'of Mercia', 'AFMR', ['AFMR']);
      expectEncoding(encoder, 'of Metz', 'AFMT', ['AFMT']);
      expectEncoding(encoder, 'of Meulan', 'AFML', ['AFML']);
      expectEncoding(encoder, 'of Nass', 'AFNS', ['AFNS']);
      expectEncoding(encoder, 'of Normandy', 'AFNR', ['AFNR']);
      expectEncoding(encoder, 'of Ohningen', 'AFNN', ['AFNN']);
      expectEncoding(encoder, 'of Orleans', 'AFRL', ['AFRL']);
      expectEncoding(encoder, 'of Poitou', 'AFPT', ['AFPT']);
      expectEncoding(encoder, 'of Polotzk', 'AFPL', ['AFPL']);
      expectEncoding(encoder, 'of Provence', 'AFPR', ['AFPR']);
      expectEncoding(encoder, 'of Ringelheim', 'AFRN', ['AFRN']);
      expectEncoding(encoder, 'of Salisbury', 'AFSL', ['AFSL']);
      expectEncoding(encoder, 'of Saxony', 'AFSK', ['AFSK']);
      expectEncoding(encoder, 'of Scotland', 'AFSK', ['AFSK']);
      expectEncoding(encoder, 'of Senlis', 'AFSN', ['AFSN']);
      expectEncoding(encoder, 'of Stafford', 'AFST', ['AFST']);
      expectEncoding(encoder, 'of Swabia', 'AFSP', ['AFSP']);
      expectEncoding(encoder, 'of Tongres', 'AFTN', ['AFTN']);
      expectEncoding(encoder, 'of the Tributes', 'AF0T', ['AFTT']);
      expectEncoding(encoder, 'of Heristal', 'AFRS', ['AFRS']);
      expectEncoding(encoder, 'of Hungary', 'AFNK', ['AFNK']);
      expectEncoding(encoder, 'of Huntington', 'AFNT', ['AFNT']);
    });

    test('test S prefixes', () {
      final encoder = DoubleMetaphone.defaultEncoder;
      expectEncoding(encoder, 'san jose', 'SNHS', ['SNHS']);
      expectEncoding(encoder, 'san jacinto', 'SNHS', ['SNHS']);
      expectEncoding(encoder, 'St. Clair', 'STKL', ['STKL']);
      expectEncoding(encoder, 'St. Claire', 'STKL', ['STKL']);
      expectEncoding(encoder, 'St. Leger', 'STLJ', ['STLK']);
      expectEncoding(encoder, 'St. Omer', 'STMR', ['STMR']);
    });

    test('test U prefixes', () {
      final encoder = DoubleMetaphone.defaultEncoder;
      expectEncoding(encoder, 'Ua Tuathail', 'AT0L', ['ATTL']);
    });

    test('test V prefixes', () {
      final encoder = DoubleMetaphone.defaultEncoder;
      expectEncoding(encoder, 'von schuller', 'FNXL', ['FNXL']);
      expectEncoding(encoder, 'van der Gouda', 'FNTR', ['FNTR']);
      expectEncoding(encoder, 'von Adenbaugh', 'FNTN', ['FNTN']);
      expectEncoding(encoder, 'Van Egmond', 'FNKM', ['FNKM']);
      expectEncoding(encoder, 'Van der Beek', 'FNTR', ['FNTR']);
    });
  });

  group('Misc Additional Tests', () {
    test('test irregular characters', () {
      final encoder = DoubleMetaphone.withMaxLength(8);
      expectEncoding(encoder, '!!cambrillo#', 'KMPRL', ['KMPR']);
      expectEncoding(encoder, 'Smith & Wesson!', 'SM0SN', ['XMTSN']);
      expectEncoding(encoder, 'andest√§d√Ætu', 'ANTSTTT', ['ANTSTTT']);
      expectEncoding(encoder, '√†√±√µ≈°', 'AN', ['AN']);
    });

    test('test with max length', () {
      final encoder = DoubleMetaphone.withMaxLength(8);
      expectEncoding(encoder, 'cambrillo', 'KMPRL', ['KMPR']);
      expectEncoding(encoder, 'Smith-Wesson', 'SM0SN', ['XMTSN']);
      expectEncoding(encoder, 'Plantagenet', 'PLNTJNT', ['PLNTKNT']);
      expectEncoding(encoder, 'WatsonEllithorpe', 'ATSNL0RP', ['FTSNLTRP']);
      expectEncoding(encoder, 'Biddy-Biddy-Bum-Chum', 'PTPTPMXM', ['PTPTPMKM']);
    });

    test('test c-cedilla', () {
      final encoder = DoubleMetaphone.withMaxLength(8);
      expectEncoding(encoder, 'fran√ßais', 'FRNS', ['FRNSS']);
      expectEncoding(encoder, 'gar√ßon', 'KRSN', ['KRSN']);
      expectEncoding(encoder, 'le√ßon', 'LSN', ['LSN']);
    });

    test('test German', () {
      final encoder = DoubleMetaphone.defaultEncoder;
      expectEncoding(encoder, 'ach', 'AK', ['AK']);
      expectEncoding(encoder, 'bacher', 'PKR', ['PKR']);
      expectEncoding(encoder, 'macher', 'MKR', ['MKR']);
    });

    test('test Italian', () {
      final encoder = DoubleMetaphone.defaultEncoder;
      expectEncoding(encoder, 'bacci', 'PX', ['PX']);
      expectEncoding(encoder, 'bertucci', 'PRTX', ['PRTX']);
      expectEncoding(encoder, 'bellocchio', 'PLX', ['PLX']);
      expectEncoding(encoder, 'bacchus', 'PKS', ['PKS']);
      expectEncoding(encoder, 'focaccia', 'FKX', ['FKX']);
      expectEncoding(encoder, 'chianti', 'KNT', ['KNT']);
      expectEncoding(encoder, 'tagliaro', 'TKLR', ['TLR']);
      expectEncoding(encoder, 'biaggi', 'PJ', ['PK']);
    });

    test('test Spanish', () {
      final encoder = DoubleMetaphone.withMaxLength(8);
      expectEncoding(encoder, 'bajador', 'PJTR', ['PHTR']);
      expectEncoding(encoder, 'cabrillo', 'KPRL', ['KPR']);
      expectEncoding(encoder, 'gallegos', 'KLKS', ['KKS']);
      expectEncoding(encoder, 'San Jacinto', 'SNHSNT', ['SNHSNT']);
    });

    test('test French', () {
      final encoder = DoubleMetaphone.defaultEncoder;
      expectEncoding(encoder, 'rogier', 'RJ', ['RJR']);
      expectEncoding(encoder, 'breaux', 'PR', ['PR']);
    });

    test('test Dutch', () {
      final encoder = DoubleMetaphone.withMaxLength(8);
      expectEncoding(encoder, 'school', 'SKL', ['SKL']);
      expectEncoding(encoder, 'schooner', 'SKNR', ['SKNR']);
      expectEncoding(encoder, 'schermerhorn', 'XRMRRN', ['SKRMRRN']);
      expectEncoding(encoder, 'schenker', 'XNKR', ['SKNKR']);
    });

    test('test Others', () {
      final encoder = DoubleMetaphone.defaultEncoder;
      expectEncoding(encoder, 'Wewski', 'ASK', ['FFSK']);
      expectEncoding(encoder, 'zhao', 'J', ['J']);
    });
  });

  group('Word Type Tests', () {
    test('test word typs', () {
      final encoder = DoubleMetaphone.withMaxLength(8);

      // silent start tests
      expectEncoding(encoder, 'Gnome', 'NM', ['NM']);
      expectEncoding(encoder, 'Knight', 'NT', ['NT']);
      expectEncoding(encoder, 'Pneumonia', 'NMN', ['NMN']);
      expectEncoding(encoder, 'Wrong', 'RNK', ['RNK']);
      expectEncoding(encoder, 'Psyllium', 'SLM', ['SLM']);

      // 'ch' words
      expectEncoding(encoder, 'Charac', 'KRK', ['KRK']);
      expectEncoding(encoder, 'Charis', 'KRS', ['KRS']);
      expectEncoding(encoder, 'chord', 'KRT', ['KRT']);
      expectEncoding(encoder, 'Chym', 'KM', ['KM']);
      expectEncoding(encoder, 'Chia', 'K', ['K']);
      expectEncoding(encoder, 'chem', 'KM', ['KM']);
      expectEncoding(encoder, 'chore', 'XR', ['XR']);
      expectEncoding(encoder, 'orchestra', 'ARKSTR', ['ARKSTR']);
      expectEncoding(encoder, 'architect', 'ARKTKT', ['ARKTKT']);
      expectEncoding(encoder, 'orchid', 'ARKT', ['ARKT']);

      // 'cc' words
      expectEncoding(encoder, 'accident', 'AKSTNT', ['AKSTNT']);
      expectEncoding(encoder, 'accede', 'AKST', ['AKST']);
      expectEncoding(encoder, 'succeed', 'SKST', ['SKST']);

      // 'mc' words
      expectEncoding(encoder, 'mac caffrey', 'MKFR', ['MKFR']);
      expectEncoding(encoder, 'mac gregor', 'MKRKR', ['MKRKR']);
      expectEncoding(encoder, 'mc crae', 'MKR', ['MKR']);
      expectEncoding(encoder, 'mcclain', 'MKLN', ['MKLN']);

      // 'gh' words
      expectEncoding(encoder, 'laugh', 'LF', ['LF']);
      expectEncoding(encoder, 'cough', 'KF', ['KF']);
      expectEncoding(encoder, 'rough', 'RF', ['RF']);

      // 'g__' words
      expectEncoding(encoder, 'gya', 'K', ['J']);
      expectEncoding(encoder, 'ges', 'KS', ['JS']);
      expectEncoding(encoder, 'gep', 'KP', ['JP']);
      expectEncoding(encoder, 'geb', 'KP', ['JP']);
      expectEncoding(encoder, 'gel', 'KL', ['JL']);
      expectEncoding(encoder, 'gey', 'K', ['J']);
      expectEncoding(encoder, 'gib', 'KP', ['JP']);
      expectEncoding(encoder, 'gil', 'KL', ['JL']);
      expectEncoding(encoder, 'gin', 'KN', ['JN']);
      expectEncoding(encoder, 'gie', 'K', ['J']);
      expectEncoding(encoder, 'gei', 'K', ['J']);
      expectEncoding(encoder, 'ger', 'KR', ['JR']);
      expectEncoding(encoder, 'danger', 'TNJR', ['TNKR']);
      expectEncoding(encoder, 'manager', 'MNKR', ['MNJR']);
      expectEncoding(encoder, 'dowager', 'TKR', ['TJR']);

      // 'pb' words
      expectEncoding(encoder, 'Campbell', 'KMPL', ['KMPL']);
      expectEncoding(encoder, 'raspberry', 'RSPR', ['RSPR']);

      // 'th' words
      expectEncoding(encoder, 'Thomas', 'TMS', ['TMS']);
      expectEncoding(encoder, 'Thames', 'TMS', ['TMS']);

      // more special cases
      expectEncoding(encoder, 'Xavier', 'SF', ['SFR']);
      expectEncoding(encoder, 'Michael', 'MKL', ['MXL']);
      expectEncoding(encoder, 'Ignacio', 'AKNS', ['ANX']);
      expectEncoding(encoder, 'Ajjam', 'AJM', ['AJM']);
      expectEncoding(encoder, 'Akkad', 'AKT', ['AKT']);
      expectEncoding(encoder, 'A√±o', 'AN', ['AN']);
      expectEncoding(encoder, 'Anno', 'AN', ['AN']);
      expectEncoding(encoder, '√±o√±o', 'NN', ['NN']);
      expectEncoding(encoder, 'Caucasian', 'KKSN', ['KKXN']);
      expectEncoding(encoder, 'Kaukasian', 'KKSN', ['KKSN']);
      expectEncoding(encoder, 'Zaqqum', 'SKM', ['SKM']);
      expectEncoding(encoder, 'stevven', 'STFN', ['STFN']);
      expectEncoding(encoder, 'Tuxx', 'TKS', ['TKS']);
      expectEncoding(encoder, 'Ghiradelli', 'JRTL', ['JRTL']);
      expectEncoding(encoder, 'ghoul', 'KL', ['KL']);
      expectEncoding(encoder, 'hej', 'HJ', ['H']);
    });
  });

  group('Matching Tests', () {
    test('test homophones', () {
      final encoder = DoubleMetaphone.defaultEncoder;
      expectEncodingEquals(encoder, 'Ray', 'Rae');
      expectEncodingEquals(encoder, 'tolled', 'told');
      expectEncodingEquals(encoder, 'brian', 'bryan');
      expectEncodingEquals(encoder, 'katherine', 'catherine');
      expectEncodingEquals(encoder, 'poor', 'pour');
      expectEncodingEquals(encoder, 'knight', 'night');
      expectEncodingEquals(encoder, 'flour', 'flower');
      expectEncodingEquals(encoder, 'cent', 'scent');
      expectEncodingEquals(encoder, 'brake', 'break');
      expectEncodingEquals(encoder, 'cell', 'sell');
    });

    test('test similar names', () {
      final encoder = DoubleMetaphone.defaultEncoder;
      expectEncodingEquals(encoder, 'Jablonski', 'Yablonsky');
      expectEncodingEquals(encoder, 'Smith', 'Schmidt');
      expectEncodingEquals(encoder, 'Bartosz', 'Bartos');
      expectEncodingEquals(encoder, 'Blansett', 'Blancett');
      expectEncodingEquals(encoder, 'Crutchfield', 'Krichfeld');
      expectEncodingEquals(encoder, 'Hicks', 'Hix');
      expectEncodingEquals(encoder, 'Shoemaker', 'Shumaker');
      expectEncodingEquals(encoder, 'Wright', 'Right');
    });

    test('test others', () {
      final encoder = DoubleMetaphone.withMaxLength(8);
      expectEncodingEquals(encoder, 'Accosinly', 'Occasionally');
      expectEncodingEquals(encoder, 'Maddness', 'Madness');
      expectEncodingEquals(encoder, 'Occusionaly', 'Occasionally');
      expectEncodingEquals(encoder, 'Steffen', 'Stephen');
      expectEncodingEquals(encoder, 'Thw', 'The');
      expectEncodingEquals(encoder, 'abilitey', 'ability');
      expectEncodingEquals(encoder, 'absorbtion', 'absorption');
      expectEncodingEquals(encoder, 'accidently', 'accidentally');
      expectEncodingEquals(encoder, 'accomodate', 'accommodate');
      expectEncodingEquals(encoder, 'acommadate', 'accommodate');
      expectEncodingEquals(encoder, 'acord', 'accord');
      expectEncodingEquals(encoder, 'adultry', 'adultery');
      expectEncodingEquals(encoder, 'aggresive', 'aggressive');
      expectEncodingEquals(encoder, 'alchohol', 'alcohol');
      expectEncodingEquals(encoder, 'alchoholic', 'alcoholic');
      expectEncodingEquals(encoder, 'allieve', 'alive');
      expectEncodingEquals(encoder, 'alot', 'a lot');
      expectEncodingEquals(encoder, 'alright', 'all right');
      expectEncodingEquals(encoder, 'amature', 'amateur');
      expectEncodingEquals(encoder, 'ambivilant', 'ambivalent');
      expectEncodingEquals(encoder, 'amourfous', 'amorphous');
      expectEncodingEquals(encoder, 'annoint', 'anoint');
      expectEncodingEquals(encoder, 'annonsment', 'announcement');
      expectEncodingEquals(encoder, 'annoyting', 'anting');
      expectEncodingEquals(encoder, 'annuncio', 'announce');
      expectEncodingEquals(encoder, 'anotomy', 'anatomy');
      expectEncodingEquals(encoder, 'antidesestablishmentarianism',
          'antidisestablishmentarianism');
      expectEncodingEquals(
          encoder, 'antidisestablishmentarism', 'antidisestablishmentarianism');
      expectEncodingEquals(encoder, 'anynomous', 'anonymous');
      expectEncodingEquals(encoder, 'appelet', 'applet');
      expectEncodingEquals(encoder, 'appreceiated', 'appreciated');
      expectEncodingEquals(encoder, 'aquantance', 'acquaintance');
      expectEncodingEquals(encoder, 'arkitiepe', 'archetype');
      expectEncodingEquals(encoder, 'asymetric', 'asymmetric');
      expectEncodingEquals(encoder, 'atentively', 'attentively');
      expectEncodingEquals(encoder, 'basicly', 'basically');
      expectEncodingEquals(encoder, 'batallion', 'battalion');
      expectEncodingEquals(encoder, 'bbrose', 'browse');
      expectEncodingEquals(encoder, 'beauro', 'bureau');
      expectEncodingEquals(encoder, 'beaurocracy', 'bureaucracy');
      expectEncodingEquals(encoder, 'beggining', 'beginning');
      expectEncodingEquals(encoder, 'behaviour', 'behavior');
      expectEncodingEquals(encoder, 'beleive', 'believe');
      expectEncodingEquals(encoder, 'belive', 'believe');
      expectEncodingEquals(encoder, 'benafitz', 'benefits');
      expectEncodingEquals(encoder, 'biggining', 'beginning');
      expectEncodingEquals(encoder, 'blait', 'bleat');
      expectEncodingEquals(encoder, 'bouyant', 'buoyant');
      expectEncodingEquals(encoder, 'boygot', 'boycott');
      expectEncodingEquals(encoder, 'brocolli', 'broccoli');
      expectEncodingEquals(encoder, 'boosh', 'bush');
      expectEncodingEquals(encoder, 'buder', 'butter');
      expectEncodingEquals(encoder, 'budr', 'butter');
      expectEncodingEquals(encoder, 'budter', 'butter');
      expectEncodingEquals(encoder, 'buracracy', 'bureaucracy');
      expectEncodingEquals(encoder, 'burracracy', 'bureaucracy');
      expectEncodingEquals(encoder, 'buton', 'button');
      expectEncodingEquals(encoder, 'byby', 'by by');
      expectEncodingEquals(encoder, 'cauler', 'caller');
      expectEncodingEquals(encoder, 'ceasar', 'caesar');
      expectEncodingEquals(encoder, 'cemetary', 'cemetery');
      expectEncodingEquals(encoder, 'changeing', 'changing');
      expectEncodingEquals(encoder, 'cheet', 'cheat');
      expectEncodingEquals(encoder, 'circall', 'circle');
      expectEncodingEquals(encoder, 'cimplicity', 'simplicity');
      expectEncodingEquals(encoder, 'circumstansays', 'circumstances');
      expectEncodingEquals(encoder, 'clob', 'club');
      expectEncodingEquals(encoder, 'coaln', 'colon');
      expectEncodingEquals(encoder, 'cochamayme', 'cockamamie');
      expectEncodingEquals(encoder, 'colleaque', 'colleague');
      expectEncodingEquals(encoder, 'colloquilism', 'colloquialism');
      expectEncodingEquals(encoder, 'columne', 'column');
      expectEncodingEquals(encoder, 'comitmment', 'commitment');
      expectEncodingEquals(encoder, 'comitte', 'committee');
      expectEncodingEquals(encoder, 'comittmend', 'commitment');
      expectEncodingEquals(encoder, 'commershells', 'commercials');
      expectEncodingEquals(encoder, 'commited', 'committed');
      expectEncodingEquals(encoder, 'commitee', 'committee');
      expectEncodingEquals(encoder, 'companys', 'companies');
      expectEncodingEquals(encoder, 'camplikayted', 'complicated');
      expectEncodingEquals(encoder, 'comupter', 'computer');
      expectEncodingEquals(encoder, 'concensus', 'consensus');
      expectEncodingEquals(encoder, 'confusionism', 'confucianism');
      expectEncodingEquals(encoder, 'congradulations', 'congratulations');
      expectEncodingEquals(encoder, 'consissdent', 'consistent');
      expectEncodingEquals(encoder, 'consinent', 'consonant');
      expectEncodingEquals(encoder, 'contunie', 'continue');
      expectEncodingEquals(encoder, 'coolie', 'coolly');
      expectEncodingEquals(encoder, 'copping', 'coping');
      expectEncodingEquals(encoder, 'cosmoplyton', 'cosmopolitan');
      expectEncodingEquals(encoder, 'kurt', 'court');
      expectEncodingEquals(encoder, 'crasy', 'crazy');
      expectEncodingEquals(encoder, 'caveeahts', 'caveats');
      expectEncodingEquals(encoder, 'criteek', 'critique');
      expectEncodingEquals(encoder, 'croke', 'croak');
      expectEncodingEquals(encoder, 'crusifyed', 'crucified');
      expectEncodingEquals(encoder, 'cumba', 'combo');
      expectEncodingEquals(encoder, 'custamisation', 'customization');
      expectEncodingEquals(encoder, 'dag', 'dog');
      expectEncodingEquals(encoder, 'daly', 'daily');
      expectEncodingEquals(encoder, 'defence', 'defense');
      expectEncodingEquals(encoder, 'definate', 'definite');
      expectEncodingEquals(encoder, 'definately', 'definitely');
      expectEncodingEquals(encoder, 'dependeble', 'dependable');
      expectEncodingEquals(encoder, 'descrption', 'description');
      expectEncodingEquals(encoder, 'desparate', 'desperate');
      expectEncodingEquals(encoder, 'dessicate', 'desiccate');
      expectEncodingEquals(encoder, 'destint', 'distant');
      expectEncodingEquals(encoder, 'developement', 'development');
      expectEncodingEquals(encoder, 'devulge', 'divulge');
      expectEncodingEquals(encoder, 'dizagree', 'disagree');
      expectEncodingEquals(encoder, 'dieties', 'deities');
      expectEncodingEquals(encoder, 'dinasaur', 'dinosaur');
      expectEncodingEquals(encoder, 'dinasour', 'dinosaur');
      expectEncodingEquals(encoder, 'discuess', 'discuss');
      expectEncodingEquals(encoder, 'disect', 'dissect');
      expectEncodingEquals(encoder, 'disippate', 'dissipate');
      expectEncodingEquals(encoder, 'disition', 'decision');
      expectEncodingEquals(encoder, 'dispair', 'despair');
      expectEncodingEquals(encoder, 'distarct', 'distract');
      expectEncodingEquals(encoder, 'distart', 'distort');
      expectEncodingEquals(encoder, 'distroy', 'destroy');
      expectEncodingEquals(encoder, 'doenload', 'download');
      expectEncodingEquals(encoder, 'dongle', 'dangle');
      expectEncodingEquals(encoder, 'doog', 'dog');
      expectEncodingEquals(encoder, 'dramaticly', 'dramatically');
      expectEncodingEquals(encoder, 'drunkeness', 'drunkenness');
      expectEncodingEquals(encoder, 'ductioneery', 'dictionary');
      expectEncodingEquals(encoder, 'ecstacy', 'ecstasy');
      expectEncodingEquals(encoder, 'efferts', 'efforts');
      expectEncodingEquals(encoder, 'egsistence', 'existence');
      expectEncodingEquals(encoder, 'eitiology', 'etiology');
      expectEncodingEquals(encoder, 'elagent', 'elegant');
      expectEncodingEquals(encoder, 'ellagand', 'elegant');
      expectEncodingEquals(encoder, 'embarass', 'embarrass');
      expectEncodingEquals(encoder, 'embarassment', 'embarrassment');
      expectEncodingEquals(encoder, 'embaress', 'embarrass');
      expectEncodingEquals(encoder, 'encapsualtion', 'encapsulation');
      expectEncodingEquals(encoder, 'encyclapidia', 'encyclopedia');
      expectEncodingEquals(encoder, 'enhence', 'enhance');
      expectEncodingEquals(encoder, 'ennuui', 'ennui');
      expectEncodingEquals(encoder, 'enventions', 'inventions');
      expectEncodingEquals(encoder, 'epitomy', 'epitome');
      expectEncodingEquals(encoder, 'equire', 'acquire');
      expectEncodingEquals(encoder, 'errara', 'error');
      expectEncodingEquals(encoder, 'airror', 'error');
      expectEncodingEquals(encoder, 'evaualtion', 'evaluation');
      expectEncodingEquals(encoder, 'excede', 'exceed');
      expectEncodingEquals(encoder, 'excercise', 'exercise');
      expectEncodingEquals(encoder, 'excpt', 'except');
      expectEncodingEquals(encoder, 'exhileration', 'exhilaration');
      expectEncodingEquals(encoder, 'existance', 'existence');
      expectEncodingEquals(encoder, 'failer', 'failure');
      expectEncodingEquals(encoder, 'faver', 'favor');
      expectEncodingEquals(encoder, 'faxe', 'fax');
      expectEncodingEquals(encoder, 'firey', 'fiery');
      expectEncodingEquals(encoder, 'fistival', 'festival');
      expectEncodingEquals(encoder, 'flatterring', 'flattering');
      expectEncodingEquals(encoder, 'fluks', 'flux');
      expectEncodingEquals(encoder, 'flukse', 'flux');
      expectEncodingEquals(encoder, 'fone', 'phone');
      expectEncodingEquals(encoder, 'forsee', 'foresee');
      expectEncodingEquals(encoder, 'funetik', 'phonetic');
      expectEncodingEquals(encoder, 'gaurd', 'guard');
      expectEncodingEquals(encoder, 'generly', 'generally');
      expectEncodingEquals(encoder, 'ghandi', 'gandhi');
      expectEncodingEquals(encoder, 'gotton', 'gotten');
      expectEncodingEquals(encoder, 'gracefull', 'graceful');
      expectEncodingEquals(encoder, 'gradualy', 'gradually');
      expectEncodingEquals(encoder, 'grammer', 'grammar');
      expectEncodingEquals(encoder, 'hallo', 'hello');
      expectEncodingEquals(encoder, 'hapily', 'happily');
      expectEncodingEquals(encoder, 'harrass', 'harass');
      expectEncodingEquals(encoder, 'heellp', 'help');
      expectEncodingEquals(encoder, 'heighth', 'height');
      expectEncodingEquals(encoder, 'hellp', 'help');
      expectEncodingEquals(encoder, 'helo', 'hello');
      expectEncodingEquals(encoder, 'hifin', 'hyphen');
      expectEncodingEquals(encoder, 'hifine', 'hyphen');
      expectEncodingEquals(encoder, 'hiphine', 'hyphen');
      expectEncodingEquals(encoder, 'hippie', 'hippy');
      expectEncodingEquals(encoder, 'hippopotamous', 'hippopotamus');
      expectEncodingEquals(encoder, 'hourse', 'horse');
      expectEncodingEquals(encoder, 'houssing', 'housing');
      expectEncodingEquals(encoder, 'howaver', 'however');
      expectEncodingEquals(encoder, 'howver', 'however');
      expectEncodingEquals(encoder, 'humaniti', 'humanity');
      expectEncodingEquals(encoder, 'hyfin', 'hyphen');
      expectEncodingEquals(encoder, 'hystrical', 'hysterical');
      expectEncodingEquals(encoder, 'imbed', 'embed');
      expectEncodingEquals(encoder, 'imediaetly', 'immediately');
      expectEncodingEquals(encoder, 'immenant', 'immanent');
      expectEncodingEquals(encoder, 'inadvertant', 'inadvertent');
      expectEncodingEquals(encoder, 'incase', 'in case');
      expectEncodingEquals(encoder, 'incedious', 'insidious');
      expectEncodingEquals(encoder, 'incompleet', 'incomplete');
      expectEncodingEquals(encoder, 'incomplot', 'incomplete');
      expectEncodingEquals(encoder, 'inconvenant', 'inconvenient');
      expectEncodingEquals(encoder, 'independant', 'independent');
      expectEncodingEquals(encoder, 'indepth', 'in depth');
      expectEncodingEquals(encoder, 'indispensible', 'indispensable');
      expectEncodingEquals(encoder, 'infact', 'in fact');
      expectEncodingEquals(encoder, 'influencial', 'influential');
      expectEncodingEquals(encoder, 'innoculate', 'inoculate');
      expectEncodingEquals(encoder, 'insistant', 'insistent');
      expectEncodingEquals(encoder, 'insistenet', 'insistent');
      expectEncodingEquals(encoder, 'instulation', 'installation');
      expectEncodingEquals(encoder, 'intelegent', 'intelligent');
      expectEncodingEquals(encoder, 'intelejent', 'intelligent');
      expectEncodingEquals(encoder, 'inteligent', 'intelligent');
      expectEncodingEquals(encoder, 'intellagant', 'intelligent');
      expectEncodingEquals(encoder, 'intellegent', 'intelligent');
      expectEncodingEquals(encoder, 'intellegint', 'intelligent');
      expectEncodingEquals(encoder, 'interpretter', 'interpreter');
      expectEncodingEquals(encoder, 'irresistable', 'irresistible');
      expectEncodingEquals(encoder, 'irritible', 'irritable');
      expectEncodingEquals(encoder, 'isreal', 'israel');
      expectEncodingEquals(encoder, 'johhn', 'john');
      expectEncodingEquals(encoder, 'kippur', 'kipper');
      expectEncodingEquals(encoder, 'knawing', 'knowing');
      expectEncodingEquals(encoder, 'leev', 'leave');
      expectEncodingEquals(encoder, 'lesure', 'leisure');
      expectEncodingEquals(encoder, 'liasion', 'lesion');
      expectEncodingEquals(encoder, 'liason', 'liaison');
      expectEncodingEquals(encoder, 'likly', 'likely');
      expectEncodingEquals(encoder, 'liquify', 'liquefy');
      expectEncodingEquals(encoder, 'lloyer', 'layer');
      expectEncodingEquals(encoder, 'lossing', 'losing');
      expectEncodingEquals(encoder, 'luser', 'laser');
      expectEncodingEquals(encoder, 'maintanence', 'maintenance');
      expectEncodingEquals(encoder, 'mandelbrot', 'Mandelbrot');
      expectEncodingEquals(encoder, 'marshall', 'marshal');
      expectEncodingEquals(encoder, 'mic', 'mike');
      expectEncodingEquals(encoder, 'midia', 'media');
      expectEncodingEquals(encoder, 'millenium', 'millennium');
      expectEncodingEquals(encoder, 'miniscule', 'minuscule');
      expectEncodingEquals(encoder, 'minkay', 'monkey');
      expectEncodingEquals(encoder, 'mischievious', 'mischievous');
      expectEncodingEquals(encoder, 'momento', 'memento');
      expectEncodingEquals(encoder, 'monkay', 'monkey');
      expectEncodingEquals(encoder, 'mosaik', 'mosaic');
      expectEncodingEquals(encoder, 'mostlikely', 'most likely');
      expectEncodingEquals(encoder, 'mousr', 'mouser');
      expectEncodingEquals(encoder, 'mroe', 'more');
      expectEncodingEquals(encoder, 'necesary', 'necessary');
      expectEncodingEquals(encoder, 'necesser', 'necessary');
      expectEncodingEquals(encoder, 'neice', 'niece');
      expectEncodingEquals(encoder, 'neighbour', 'neighbor');
      expectEncodingEquals(encoder, 'nemonic', 'pneumonic');
      expectEncodingEquals(encoder, 'nevade', 'Nevada');
      expectEncodingEquals(encoder, 'nickleodeon', 'nickelodeon');
      expectEncodingEquals(encoder, 'nieve', 'naive');
      expectEncodingEquals(encoder, 'noone', 'no one');
      expectEncodingEquals(encoder, 'notin', 'not in');
      expectEncodingEquals(encoder, 'nozled', 'nuzzled');
      expectEncodingEquals(encoder, 'ocassion', 'occasion');
      expectEncodingEquals(encoder, 'occuppied', 'occupied');
      expectEncodingEquals(encoder, 'occurence', 'occurrence');
      expectEncodingEquals(encoder, 'octagenarian', 'octogenarian');
      expectEncodingEquals(encoder, 'opposim', 'opossum');
      expectEncodingEquals(encoder, 'organise', 'organize');
      expectEncodingEquals(encoder, 'organiz', 'organize');
      expectEncodingEquals(encoder, 'oscilascope', 'oscilloscope');
      expectEncodingEquals(encoder, 'permissable', 'permissible');
      expectEncodingEquals(encoder, 'permmasivie', 'permissive');
      expectEncodingEquals(encoder, 'persue', 'pursue');
      expectEncodingEquals(encoder, 'phantasia', 'fantasia');
      expectEncodingEquals(encoder, 'phenominal', 'phenomenal');
      expectEncodingEquals(encoder, 'playwrite', 'playwright');
      expectEncodingEquals(encoder, 'poeses', 'poesies');
      expectEncodingEquals(encoder, 'poligamy', 'polygamy');
      expectEncodingEquals(encoder, 'pollice', 'police');
      expectEncodingEquals(encoder, 'polypropalene', 'polypropylene');
      expectEncodingEquals(encoder, 'possable', 'possible');
      expectEncodingEquals(encoder, 'practicle', 'practical');
      expectEncodingEquals(encoder, 'preceeding', 'preceding');
      expectEncodingEquals(encoder, 'preemptory', 'peremptory');
      expectEncodingEquals(encoder, 'prefixt', 'prefixed');
      expectEncodingEquals(encoder, 'presbyterian', 'Presbyterian');
      expectEncodingEquals(encoder, 'presue', 'pursue');
      expectEncodingEquals(encoder, 'presued', 'pursued');
      expectEncodingEquals(encoder, 'privielage', 'privilege');
      expectEncodingEquals(encoder, 'priviledge', 'privilege');
      expectEncodingEquals(encoder, 'proceedures', 'procedures');
      expectEncodingEquals(encoder, 'pronensiation', 'pronunciation');
      expectEncodingEquals(encoder, 'pronounciation', 'pronunciation');
      expectEncodingEquals(encoder, 'properally', 'properly');
      expectEncodingEquals(encoder, 'proplematic', 'problematic');
      expectEncodingEquals(encoder, 'protray', 'portray');
      expectEncodingEquals(encoder, 'pscolgst', 'psychologist');
      expectEncodingEquals(encoder, 'quoz', 'quiz');
      expectEncodingEquals(encoder, 'radious', 'radius');
      expectEncodingEquals(encoder, 'reccomend', 'recommend');
      expectEncodingEquals(encoder, 'reccona', 'raccoon');
      expectEncodingEquals(encoder, 'recieve', 'receive');
      expectEncodingEquals(encoder, 'reconise', 'recognize');
      expectEncodingEquals(encoder, 'reoccurring', 'recurring');
      expectEncodingEquals(encoder, 'repitition', 'repetition');
      expectEncodingEquals(encoder, 'respct', 'respect');
      expectEncodingEquals(encoder, 'runnung', 'running');
      expectEncodingEquals(encoder, 'sacreligious', 'sacrilegious');
      expectEncodingEquals(encoder, 'salut', 'salute');
      expectEncodingEquals(encoder, 'searcheable', 'searchable');
      expectEncodingEquals(encoder, 'seferal', 'several');
      expectEncodingEquals(encoder, 'segements', 'segments');
      expectEncodingEquals(encoder, 'sence', 'sense');
      expectEncodingEquals(encoder, 'seperate', 'separate');
      expectEncodingEquals(encoder, 'sieze', 'seize');
      expectEncodingEquals(encoder, 'simplye', 'simply');
      expectEncodingEquals(encoder, 'sitte', 'site');
      expectEncodingEquals(encoder, 'slyph', 'sylph');
      expectEncodingEquals(encoder, 'smil', 'smile');
      expectEncodingEquals(encoder, 'sometmes', 'sometimes');
      expectEncodingEquals(encoder, 'soonec', 'sonic');
      expectEncodingEquals(encoder, 'spel', 'spell');
      expectEncodingEquals(encoder, 'spoak', 'spoke');
      expectEncodingEquals(encoder, 'sponsered', 'sponsored');
      expectEncodingEquals(encoder, 'stering', 'steering');
      expectEncodingEquals(encoder, 'straightjacket', 'straitjacket');
      expectEncodingEquals(encoder, 'stumach', 'stomach');
      expectEncodingEquals(encoder, 'stutent', 'student');
      expectEncodingEquals(encoder, 'styleguide', 'style guide');
      expectEncodingEquals(encoder, 'subpena', 'subpoena');
      expectEncodingEquals(encoder, 'suger', 'sugar');
      expectEncodingEquals(encoder, 'supercede', 'supersede');
      expectEncodingEquals(encoder, 'superfulous', 'superfluous');
      expectEncodingEquals(encoder, 'susan', 'Susan');
      expectEncodingEquals(encoder, 'swimwear', 'swim wear');
      expectEncodingEquals(encoder, 'taff', 'tough');
      expectEncodingEquals(encoder, 'taht', 'that');
      expectEncodingEquals(encoder, 'tattos', 'tattoos');
      expectEncodingEquals(encoder, 'techniquely', 'technically');
      expectEncodingEquals(encoder, 'teh', 'the');
      expectEncodingEquals(encoder, 'tem', 'team');
      expectEncodingEquals(encoder, 'teo', 'two');
      expectEncodingEquals(encoder, 'teridical', 'theoretical');
      expectEncodingEquals(encoder, 'tesst', 'test');
      expectEncodingEquals(encoder, 'theridically', 'theoretical');
      expectEncodingEquals(encoder, 'thredically', 'theoretically');
      expectEncodingEquals(encoder, 'thruout', 'throughout');
      expectEncodingEquals(encoder, 'ths', 'this');
      expectEncodingEquals(encoder, 'titalate', 'titillate');
      expectEncodingEquals(encoder, 'tobagan', 'tobaggon');
      expectEncodingEquals(encoder, 'tommorrow', 'tomorrow');
      expectEncodingEquals(encoder, 'tomorow', 'tomorrow');
      expectEncodingEquals(encoder, 'trubbel', 'trouble');
      expectEncodingEquals(encoder, 'ttest', 'test');
      expectEncodingEquals(encoder, 'tyrrany', 'tyranny');
      expectEncodingEquals(encoder, 'unatourral', 'unnatural');
      expectEncodingEquals(encoder, 'unaturral', 'unnatural');
      expectEncodingEquals(encoder, 'underladder', 'under ladder');
      expectEncodingEquals(encoder, 'unentelegible', 'unintelligible');
      expectEncodingEquals(encoder, 'unnaturral', 'unnatural');
      expectEncodingEquals(encoder, 'upcast', 'up cast');
      expectEncodingEquals(encoder, 'verison', 'version');
      expectEncodingEquals(encoder, 'vinagarette', 'vinaigrette');
      expectEncodingEquals(encoder, 'volunteerism', 'voluntarism');
      expectEncodingEquals(encoder, 'volye', 'volley');
      expectEncodingEquals(encoder, 'waite', 'wait');
      expectEncodingEquals(encoder, "wan't", "won't");
      expectEncodingEquals(encoder, 'warloord', 'warlord');
      expectEncodingEquals(encoder, 'whaaat', 'what');
      expectEncodingEquals(encoder, 'whard', 'ward');
      expectEncodingEquals(encoder, 'whimp', 'wimp');
      expectEncodingEquals(encoder, 'wicken', 'weaken');
      expectEncodingEquals(encoder, 'wierd', 'weird');
      expectEncodingEquals(encoder, 'wrank', 'rank');
      expectEncodingEquals(encoder, 'writeen', 'righten');
      expectEncodingEquals(encoder, 'writting', 'writing');
      expectEncodingEquals(encoder, 'wundeews', 'windows');
      expectEncodingEquals(encoder, 'yeild', 'yield');
      expectEncodingEquals(encoder, "you're", 'your');
    });
  });
}
